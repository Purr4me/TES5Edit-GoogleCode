I'm going to be altering this post as a tutorial.  Once I am done with it I'll remove this message.  When I'm done I'll post it as a Wiki on the site.

[size="3"][color="#FF8C00"][b]Decoder tutorial:[/b][/color][/size]

This is an example of what xDump writes to the text file.

[spoiler][code]GRUP Top "MGEF"
  MGEF - Base Effect [000E3F0A] <VoiceStormCallEffect1Self>
    Record Header
      1 Signature: MGEF
      2 Unknon Data : itU32: F1 02 00 00
      Record Flags
      4 FormID: MGEF - Base Effect [000E3F0A] <VoiceStormCallEffect1Self>
      5 Unknon Data : itU32: 19 71 55 00
      6 Form Version : 43
      6 Unknon Data : itU16 : (Possible Flag): 07 00
    EDID - Editor ID: VoiceStormCallEffect1Self
    VMAD
    FULL
    MDOB
    KSIZ
    KWDA
    DATA
    SNDD
    DNAM
    CTDA[/code][/spoiler]

So now that you see the fields being displayed you would go to the routine in the .pas file.  To find the reference you would search "wbDefinitionsTES5.pas" for "wbRecord(MGEF" and you will find the following.  

[spoiler][code] wbRecord(MGEF, 'Base Effect', [
    wbEDIDReq,
    wbFULL,
    wbDESCReq,
    wbICON,
    wbMODL,
    wbUnknown(MDOB),
    wbUnknown(KSIZ),
    wbUnknown(KWDA),
    wbStruct(DATA, 'Data', [
      wbInteger('Flags', itU32, wbFlags([
        {0x00000001} 'Hostile',
        {0x00000002} 'Recover',
        {0x00000004} 'Detrimental',
        {0x00000008} '',
        {0x00000010} 'Self',
        {0x00000020} 'Touch',
        {0x00000040} 'Target',
        {0x00000080} 'No Duration',
        {0x00000100} 'No Magnitude',
        {0x00000200} 'No Area',
        {0x00000400} 'FX Persist',
        {0x00000800} '',
        {0x00001000} 'Gory Visuals',
        {0x00002000} 'Display Name Only',
        {0x00004000} '',
        {0x00008000} 'Radio Broadcast ??',
        {0x00010000} '',
        {0x00020000} '',
        {0x00040000} '',
        {0x00080000} 'Use skill',
        {0x00100000} 'Use attribute',
        {0x00200000} '',
        {0x00400000} '',
        {0x00800000} '',
        {0x01000000} 'Painless',
        {0x02000000} 'Spray projectile type (or Fog if Bolt is specified as well)',
        {0x04000000} 'Bolt projectile type (or Fog if Spray is specified as well)',
        {0x08000000} 'No Hit Effect',
        {0x10000000} 'No Death Dispel',
        {0x20000000} '????'
      ])),
      {04} wbFloat('Base cost (Unused)'),
      {08} wbUnion('Assoc. Item', wbMGEFFAssocItemDecider, [
             wbFormID('Unused', cpIgnore),
             wbFormID('Assoc. Item'),
             wbFormIDCk('Assoc. Script', [SCPT, NULL]), //Script
             wbFormIDCk('Assoc. Item', [WEAP, ARMO, NULL]), //Bound Item
             wbFormIDCk('Assoc. Creature', [CREA]) //Summon Creature
           ]),
      {12} wbInteger('Magic School (Unused)', itS32, wbEnum([
      ], [
        -1, 'None'
      ])),
      {16} wbInteger('Resistance Type', itS32, wbActorValueEnum),
      {20} wbInteger('Unknown', itU16),
      {22} wbByteArray('Unused', 2),
      {24} wbFormIDCk('Light', [LIGH, NULL]),
      {28} wbFloat('Projectile speed'),
      {32} wbFormIDCk('Effect Shader', [EFSH, NULL]),
      {36} wbFormIDCk('Object Display Shader', [EFSH, NULL]),
      {40} wbFormIDCk('Effect sound', [NULL, SOUN]),
      {44} wbFormIDCk('Bolt sound', [NULL, SOUN]),
      {48} wbFormIDCk('Hit sound', [NULL, SOUN]),
      {52} wbFormIDCk('Area sound', [NULL, SOUN]),
      {56} wbFloat('Constant Effect enchantment factor  (Unused)'),
      {60} wbFloat('Constant Effect barter factor (Unused)'),
      {64} wbInteger('Archtype', itU32, wbEnum([
             {00} 'Value Modifier',
             {01} 'Script',
             {02} 'Dispel',
             {03} 'Cure Disease',
             {04} '',
             {05} '',
             {06} '',
             {07} '',
             {08} '',
             {09} '',
             {10} '',
             {11} 'Invisibility',
             {12} 'Chameleon',
             {13} 'Light',
             {14} '',
             {15} '',
             {16} 'Lock',
             {17} 'Open',
             {18} 'Bound Item',
             {19} 'Summon Creature',
             {20} '',
             {21} '',
             {22} '',
             {23} '',
             {24} 'Paralysis',
             {25} '',
             {26} '',
             {27} '',
             {28} '',
             {29} '',
             {30} 'Cure Paralysis',
             {31} 'Cure Addiction',
             {32} 'Cure Poison',
             {33} 'Concussion',
             {34} 'Value And Parts',
             {35} 'Limb Condition',
             {36} 'Turbo'
           ]), cpNormal, False, nil, wbMGEFArchtypeAfterSet),
      {68} wbActorValue
    ], cpNormal, True)
  ], False, nil, cpNormal, False, wbMGEFAfterLoad);[/code][/spoiler]

So how to approach this is to look at the first undefined entry "VMAD"  I'm going to place a line of code before DATA and after KWDA which would look like this.[code]    wbUnknown(VMAD),[/code]  If I added that one thing and ran dump again it would get this.
[spoiler]  MGEF - Base Effect [000E3F0A] <VoiceStormCallEffect1Self>
    Record Header
      1 Signature: MGEF
      2 Unknon Data : itU32: F1 02 00 00
      Record Flags
      4 FormID: MGEF - Base Effect [000E3F0A] <VoiceStormCallEffect1Self>
      5 Unknon Data : itU32: 19 71 55 00
      6 Form Version : 43
      6 Unknon Data : itU16 : (Possible Flag): 07 00
    EDID - Editor ID: VoiceStormCallEffect1Self
    VMAD - Unknown: 05 00 02 00 02 00 1A 00 6D 61 67 69 63 50 72 6F 6A 65 63 74 69 6C 65 53 74 6F 72 6D 53 63 72 69 70 74 00 0A 00 0B 00 66 52 65 63 61 73 74 52 61 6E 64 04 01 00 00 40 40 0F 00 66 53 74 61 72 74 44 65 6C 61 79 52 61 6E 64 04 01 00 00 40 40 08 00 53 70 65 6C 6C 52 65 66 01 01 00 00 FF FF B7 4C 0E 00 0F 00 50 6C 61 63 65 64 41 63 74 69 76 61 74 6F 72 01 01 00 00 FF FF FF 79 0B 00 0B 00 43 61 73 74 69 6E 67 49 6D 6F 64 01 01 00 00 FF FF 93 9D 0A 00 07 00 66 52 65 63 61 73 74 04 01 00 00 40 40 15 00 50 6C 61 63 65 64 54 61 72 67 65 74 41 63 74 69 76 61 74 6F 72 01 01 00 00 FF FF FF 79 0B 00 07 00 53 6F 75 6E 64 46 58 01 01 00 00 FF FF 82 B3 0E 00 06 00 66 44 65 6C 61 79 04 01 00 00 40 40 15 00 4D 41 47 50 72 6F 6A 65 63 74 69 6C 65 53 74 6F 72 6D 56 61 72 01 01 00 00 FF FF AB 1D 10 00 15 00 6D 61 67 69 63 53 65 74 57 65 61 74 68 65 72 53 63 72 69 70 74 00 06 00 14 00 57 65 61 74 68 65 72 45 78 63 65 70 74 69 6F 6E 4C 69 73 74 01 01 00 00 FF FF 98 09 00 01 0B 00 57 65 61 74 68 65 72 46 6F 72 6D 01 01 00 00 FF FF 86 48 0D 00 0D 00 4C 6F 63 61 6C 57 65 61 74 68 65 72 42 03 01 03 00 00 00 14 00 62 48 6F 6C 64 57 65 61 74 68 65 72 55 6E 74 69 6C 45 6E 64 05 01 01 0D 00 4C 6F 63 61 6C 57 65 61 74 68 65 72 41 03 01 02 00 00 00 10 00 57 65 61 74 68 65 72 41 66 74 65 72 46 6F 72 6D 01 01 00 00 FF FF 1F 82 0C 00
    FULL
    MDOB
    KSIZ
    KWDA
    DATA
    SNDD
    DNAM
    CTDA[/spoiler]

From what I can tell entries like wbFULL, are called to properly define a field simular to VMAD.  The other thing is that xDump seems to need all the entries in order.  Rather then adding adidtioal lines and compiling it several times, just add them all at once.  You would add something like this.
[spoiler][code]
    wbUnknown(FULL).
    wbUnknown(MDOB).
    wbUnknown(KSIZ).
    wbUnknown(KWDA).
    wbUnknown(DATA).
    wbUnknown(SNDD).
    wbUnknown(DNAM).
    wbUnknown(CTDA).[/code][/spoiler]

The pascal code was put in the same order shown in the text file.  However, doing what I show above will just dump a bunch of hex to the text file.  By looking at the code you notice things like wbFull, wbICON, and wbMODL.  The name of the pre defined routine is simply wb[Signature] and Signature is the name of the record on the USEP Wiki, and shown in the text file that xDump made.

So you would search for just the signature to start with.  Search for CTDA and you will find this entry.

[code]  CTDA : TwbSignature = 'CTDA';[/code]

A constant like that needs to be defined for all the Signatures or Record Names.  If it wasn't there you would just make one and add a comment.  You will also find the following:

[code]wbCTDA :=
    wbStruct(CTDA, 'Condition',
    Many more lines of code..[/code]
And
[code]  wbCTDAs := wbRArray('Conditions', wbCTDA);
  wbCTDAsReq := wbRArray('Conditions', wbCTDA, cpNormal, True);
[/code]

wbCTDA is for one entry, wbCTDAs is for multiple entries one after the other of wbCTDA, and wbCTDAsReq is also an array for multiple entries.  The difference between wbCTDAs and wbCTDAsReq has to do with conflict resolution.  From what I can tell 'Req' = "is it required."  I don't fully understand the 'Required' part but we can always go back and edit entries like these once we know more about the conflict resolution.

For the other fields you need to define the constant, and refer to the USEP wiki to see what type of value that record has.  If it's a string you would use WbString([Signature], and formating information).  For an integer you would use wbInteger([Signature], and formating information).  For flags you have to set that up as shown.  What I'm asking us to do for flags to start with is simply put an '*' in front of the flag name until we verify whether or not it's still a valid flag name.  A flag of 'Gun Ammo' probably isn't valid for example.

[spoiler][code]
    wbUnknown(FULL).
    wbUnknown(MDOB).
    wbUnknown(KSIZ).
    wbUnknown(KWDA).
    wbUnknown(DATA).
    wbUnknown(SNDD).
    wbUnknown(DNAM).
    wbCTDAReq.[code][/spoiler]

As you continue all the wbUnknown entries will be replaced by a special formater like wbCTDA, or by wbString(), or wbInteger() and so on.  Properly defined MGEF will show all the information correctly.  A properly defined wbDefinitionsTES5.pas will then be used for TES5Edit and, properly defined records will be updated on the USEP Wiki for the rest of the modding community to refer to.
<noinclude>{{Trail|File Formats|Mod File Format|Fields}}
{{TOCright}}</noinclude>
'''VMAD''' fields contain Papyrus script data, and are present in any record that contains a script, including items, dialogues, packages, and quests.  Information contained in the VMAD field includes:
* The names of all scripts attached to the record, including scripts attached to individual components (e.g., quest aliases) of the record.
** The initial values of all properties in each of those scripts
* The names of all script fragments attached to the record.  Script fragments are most commonly used in quests, where each stage of a quest can have an associated script fragment.

The VMAD field contains several distinct sections.  However, the entire field must be processed sequentially in order to identify the sections; the lengths and locations of the various sections are not provided, making it impossible to skip through the field to specific section.  All VMAD fields contain a [[#Primary Scripts Sections|Primary Scripts Section]] and its format is the same for all record types; in the majority of cases, that is the only section present.  However, some records also contain a [[#Fragments Section|Fragments Section]], with a format that is dependent upon the record type.  Quest records can also have a third section listing the [[#Alias Scripts Sections|Alias Scripts]] attached to the quest.

All script names mentioned in the VMAD field are provided without an extension.  The game itself accesses compiled versions of each script, which are given a [[Tes5Mod:Compiled Script File Format|.pex extension]] and are stored in one of the game's [[Tes5Mod:Archive File Format|.bsa archive files]].  The source versions of the scripts, which use a .psc extension, are not accessed by the game (and were not part of the original game distribution), but are instead only used by the Creation Kit.  The source scripts were made available following the release of the Creation Kit, and all 10005 scripts (as of patch 1.5) are available in the Data/Scripts/Source directory of your Skyrim installation.

== Primary Scripts Section ==
The Primary Scripts Section is present in all VMAD fields, and has the same format in all cases.
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|- 
| version || int16 || 5 most recent, 2 is minimum.
|-
| objFormat || int16 || Seems to always be 1 or 2; affects how object-type properties are read.
|-
| scriptCount || uint16 || Number of scripts directly attached to this record
|- 
| scripts || [[#Script Entry|Script]][scriptCount] || Information on each of the scripts, including name, list of properties, and their initial values.  The length of each Script Entry is different, based upon its contents.
|}

== Fragments Section ==
If there are no fragments or alias scripts attached to this record, the VMAD field simply ends after the Primary Scripts Section.  However, when there are fragments, the specific format used to list those fragments is dependent upon the record type.  Note in particular that the fragmentCount appears ''before'' the fileName in some cases, but after the fileName in other cases.  None of the other record type other than those listed below ever use script fragments.

=== INFO Records ===
INFO record fragment scripts are by default stored in a TIF file, i.e., a file named "TIF_<editorID>_<formID>".  Since most INFO records do not have an editorID, this actually ends up being "TIF__<formID>" (with ''two'' underscores, not one).  The format of the fragments section for INFO records has not yet been decoded.

=== PACK Records ===
PACK record fragment scripts are by default stored in a PF file, i.e., a file named "PF_<editorID>_<formID>".
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|- 
| unknown || int8 ||
|-
| flags? || uint8 || The meaning of the flags is unknown, however the fragmentCount is always the number of flag bits that have been set
|-
| fileName || wstring || Name of the script file containing the fragments (without extension).
|- 
| fragments || fragment[fragmentCount] || Information on each fragment, as detailed in the following lines
|- {{ThickLine}}
| fragment.unknown || int8 ||
|-
| fragment.scriptName || wstring || Name of script (normally same as fileName)
|-
| fragment.fragmentName || wstring || Name of function containing this fragment script.  Typically a name such as "Fragment_5"
|}
=== PERK Records ===
PERK record fragment scripts are by default stored in a PRKF file, i.e., a file named "PRKF_<editorID>_<formID>".
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|- 
| unknown || int8 ||
|-
| fileName || wstring || Name of the script file containing the fragments (without extension).
|-
| fragmentCount || uint16 || Number of script fragments in this record
|- 
| fragments || fragment[fragmentCount] || Information on each fragment, as detailed in the following lines
|- {{ThickLine}}
| fragment.index || uint16 || Index
|-
| fragment.unknown || int16 ||
|-
| fragment.unknown || int8 ||
|-
| fragment.scriptName || wstring || Name of script (normally same as fileName)
|-
| fragment.fragmentName || wstring || Name of function containing this fragment script.  Typically a name such as "Fragment_5"
|}
=== QUST Records ===
QUST record fragment scripts are by default stored in a QF file, i.e., a file named "QF_<editorID>_<formID>".
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|- 
| unknown || int8 ||
|-
| fragmentCount || uint16 || Number of script fragments in this record
|-
| fileName || wstring || Name of the script file containing the fragments (without extension).
|- 
| fragments || fragment[fragmentCount] || Information on each fragment, as detailed in the following lines
|- {{ThickLine}}
| fragment.index || uint16 || Quest stage index (equivalent to QUST INDX field) to which this fragment is attached
|-
| fragment.unknown || int16 ||
|-
| fragment.unknown || int32 ||
|-
| fragment.unknown || int8 ||
|-
| fragment.scriptName || wstring || Name of script (normally same as fileName)
|-
| fragment.fragmentName || wstring || Name of function containing this fragment script.  Typically a name such as "Fragment_5"
|}
=== SCEN Records ===
SCEN record fragment scripts are by default stored in a SF file, i.e., a file named "SF_<editorID>_<formID>".  The format of the fragments section for SCEN records has not yet been decoded.

== Alias Scripts Section ==
The Alias Scripts Section only appears in quests.  If the Fragments Section is present for a quest, then the Alias Scripts Section always appears -- even if it simply contains a "0" for the aliasCount, indicating that there are no Alias Scripts.
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|- 
| aliasCount || uint16 || Number of aliases that have attached scripts.  If 0, the rest of the section is empty.
|-
| aliases || alias[aliasCount] || Information on the scripts attached to each alias, as detailed in the following lines
|- {{ThickLine}}
| alias.unknown || int16 ||
|-
| alias.aliasID || uint16 || The AliasID (equivalent to QUST ALLS/ALST field) to which the scripts are attached
|-
| alias.unknown || int32 ||
|-
| alias.unknown || int16 ||
|-
| alias.objFormat || int16 || Seems to always be 1 or 2, and is always same as overall objFormat value for this record; affects how object-type properties are read for this alias.
|-
| alias.scriptCount || uint16 || Number of scripts attached to this alias
|- 
| alias.scripts || [[#Script Entry|Script]][alias.scriptCount] || Information on each of the scripts, including name, list of properties, and their initial values.
|}

==Type Details==
=== Script Entry ===
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info
|-
| scriptName || wstring || Name of the script (without extension).
|-
| unknown || uint8 || Only present if version >= 4. Defaults to 0 for earlier versions.
|-
| propertyCount || uint16 || The number of properties that are defined in this script.
|-
| properties || [[#Property Entry|Property]][propertyCount] || The name and initial value of each property.  The length of each property entry is different, depending upon its contents.
|}

=== Property Entry ===
{| class="wikitable" width="100%" 
! width="20%" | Name
! width="20%" | [[Tes5Mod:File Format Conventions|Type/Size]]
! width="60%" | Info

|-
| propertyName || wstring || Name of the property.
|-
| propertyType || uint8 || Lookup value indicating the type of data stored in the property.  Only the following values are possible:
* 1 = object (int64)
* 2 = wstring (uint16 length + string[length])
* 3 = int (int32)
* 4 = float
* 5 = bool (int8)
''Only supported if version >= 5:''
* 11 = array of objects (int64)
* 12 = array of wstrings (uint16 length + string[length])
* 13 = array of ints (int32)
* 14 = array of floats
* 15 = array of bools (int8)

Object types are used to assign formid values to properties, in particular for quest aliases, but also for a range of other cases that use formids. The length of the data for an object is always 8 bytes, but how the bytes are decoded depend upon the value of objFormat:
* If objFormat=1, then: bytes 0-3 are a formid; bytes 4-5 are a uint16 providing the AliasID; bytes 6-7 are zero.
* If objFormat=2, then: bytes 0-1 are zero, bytes 2-3 are a uint16 providing the AliasID; bytes 4-7 are a formid.
The AliasID is set to -1 whenever the formid does not point to a quest (in which case the formid is directly assigned to the property).  Otherwise, the AliasID provides the quest alias used to assign the value (which nearly always means that the property effectively points to itself, e.g., the <code>Alias_DragonMoundTundra03Marker</code> property points to the quest's <code>DragonMoundTundra03Marker</code> alias).
|-
| unknown3 || uint8 || Only present if version >= 4. Defaults to 1 for earlier versions.
|-
| data || depends on type || If the data is an array (if type is 11-15), the data consists of:
* uint32: itemCount
* items[itemCount]

|}

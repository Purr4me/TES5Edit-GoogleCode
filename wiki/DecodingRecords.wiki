#summary How to Decode Skyrim's Records

= New Decoding Method =

1: Make a small plugin for the Record you will be working on.
2: Save it with any name, but with the sufix _Chg. Example: TES5DumpRACE_Chg.esp
3: Make a copy of that exact file. Windows will call it: TES5DumpRACE_Chg - Copy.esp
4: Now rename that file to TES5DumpRACE_Org.esp
5: Make a batch file that Dumps both files.
<code>
Example:
TES5Dump "TES5Dump_Everything_Org.esp" > "TES5Dump_Everything_Org.txt" 2> "TES5CONlog_Everything_Org.txt"
TES5Dump "TES5Dump_Everything_Chg.esp" > "TES5Dump_Everything_Chg.txt" 2> "TES5CONlog_Everything_Chg.txt"
</code>
6: Run the batch file.
7: Open both file using a Diff program like BeyondCompare.

Now when you make changes to the file the changes are more obvious because the Diff program shows you the differences.  It will also highlight all the other locations that changes occured.

Just keep modifying the _Chg file.  If you are going to determine flags I suggest you turn all the flags off.  Then copy your _Chg file to _Org.  Make changes to the _Chg file and the flags become more clear.

= Source Code Definitions =

== Conflict checks with cpBenign ==

In xEdit, cpBenign differences are highlighted, but are otherwise ignored.

== wbFormIDCkNoReach ==

NoReach is relevant when the determining which records can be reached by the player starting the game normally. Not every FormID everywhere is a link that should be followed for this purpose.
 
e.g. suppose there is a DOOR that can be opened with a specific KEYM. Just because there is a way to get from the player record (and its initial location, the auto-start quests and a number of other relevant start records) to the record placing the DOOR by following FormID fields from one record to another doesn't mean that the KEYM is also reachable. NoReach simply prevents a FormID field from being followed during reachability detection.

== Differences between functions with or without "R" ==

The "R" in the name (wbStruct vs. wbRStruct, wbArray vs. wbRArray, wbUnion vs wbRUnion) stands for “R”ecord. Structs, Arrays, and Unions contain fields. RStructs, RArrays, and RUnion contain (sub-)records.

== wbUnion and wbRUnion ==

wbSCROs :=
  wbRArray('References',
    wbRUnion('', [
      wbFormIDCk(SCRO, 'Global Reference',
        [ACTI, DOOR, STAT, FURN, CREA, SPEL, NPC_, CONT, ARMO, AMMO, MISC, WEAP, IMAD,
        BOOK, KEYM, ALCH, LIGH, QUST, PLYR, PACK, LVLI, ECZN, EXPL, FLST, IDLM, PMIS,
        FACT, ACHR, REFR, ACRE, GLOB, DIAL, CELL, SOUN, MGEF, WTHR, CLAS, EFSH, RACE,
        LVLC, CSTY, WRLD, SCPT, IMGS, MESG, MSTT, MUSC, NOTE, PERK, PGRE, PROJ, LVLN,
        WATR, ENCH, TREE, REPU, REGN, CSNO, CHAL, IMOD, RCCT, CMNY, CDCK, CHIP, CCRD,
        NULL]),
      wbInteger(SCRV, 'Local Variable', itU32)
    ], [])
  );
 
wbUnion is used if there is a field inside a subrecord which can be of different possible types, and a union decider callback is used to figure out which of the different options to take.
 
wbRUnion is used if there are different possible subrecords that can occur. In this case no union decider callback is required as the different signatures already distinguish the possible subrecords.
 
Assuming that you don’t have an array of just ALST and ALLS, but that an ALST is always followed by a bunch of specific subrecords, while an ALLS is always followed by a bunch of other specific subrecods, you would have an:
 
wbRArray
  wbRUnion
    wbRStruct
      ALST
      …
    wbRStruct
      ALLS
      …
 
That is, an record array of record unions of different possible record structs.
 
If on the other hand ALST and ALLS is always followed by the same other subrecords before the next ALST or ALLS, you would have:
 
wbRArray
  wbRStruct
    wbRUnion
      ALST
			ALLS
    …
 
That is, an record array of record structs, the first member of which is a record union of either ALST or ALLS.

= Code Examples =

== Arrays of FormID ==

<code>
wbArrayS(XCLR, 'Regions', wbFormIDCk('Region', [REGN])),
wbArray(IDLA, 'Animations', wbFormIDCk('Animation', [IDLE]), 0, nil, nil, cpNormal, True)
</code>

<code>
wbKWDA := wbFormID(KWDA, 'Keywords');
wbKWDAs := wbRArray('Keyword', wbKWDA);
</code>

Is an array of 0 or more KWDA subrecords, each with a single FormID.

<code>
wbKWDAs := wbArray(KWDA, 'Keywords', wbFormID('Keyword'), 0, nil, cpNormal, True);
</code>

Which is a KWDA subrecord, containing 1 or more FormIDs.

If KSIZ and KWDA always appears together like that, you should probably define it as:

== Other Keyword Possibilities ==
 
<code>
 var
  wbKeywords: IwbSubRecordStructDef;
 
  wbKeywords := wbRStruct('Keywords', [
    wbInteger(KSIZ, 'Count', itU32, nil, cpNormal, True),
    wbArray(KWDA, 'Keywords', wbFormID('Keyword'), 0, nil, cpNormal, True)
  ], []);
</code>
 
If only certain specific types of FormIDs are allowed, then you should be using wbFormIDCk (Ck = check)
 
If the order of the keywords is not important, then you should use wbArrayS (S = sorted) instead. (Sorted arrays work better for comparison between different record versions in xEdit).
 
KDIZ and KWDA are both marked as required, this way you can't remove/add them individually in xEdit, you can only remove/add the Keywords record struct as a whole, which will add both KSIZ and KWDA subrecords together, or remove them together.
 
Also, for xEdit instead of xDump, there will need to be a mechanism in place that updates the value of KSIZ as elements are added/removed from the KWDA array. I'm not sure if there is an appropriate mechanism already in place that could be used for this, it might be necessary to add something to wbInterface/wbImplementation for this. Best make an “//!!!Update Count for xEdit” comment on the KSIZ line so that it can be reviewed later.

= Decoding Skyrim Records =

The wbDefinitionsTES5.pas is but one of about 80 files used to make TES5Edit and it's predecessors FO3Edit, FNVEdit, and TES4Edit.  The complexity of the object oriented programing involved makes it so that once we are done with wbDefinitionsTES5.pas the pascal file is used to make TES5Edit.  Granted some other things will need to be updated in the supporting files but I am doing work on additional files to save Elminster some time, and help get us a working copy of TES5Edit.  Updates to TES5Edit will apply to previous versions automatically.

For this example we are going to start with WTHR.  If you run TES5Dump you are going to notice that there are record names with undefined data after them.  Like this for example:

<code>
  MNAM
  RNAM
  QNAM
  JNAM
  FNAM
  IMSP
  DALC</code>

Sometimes you will see two or more entries of the same thing like:
  
<code>
  MNAM
  MNAM
  MNAM</code>

In which you use one of the array functions to deal with them.  Other records could contain 2 or more of "MNAM" and the array function will capture all that exist.

Start by searching for the WTHR record by using "wbRecords(WTHR" and that will take you to the beginning of the record.  In it's current state like many of the records its simply a copy of FNV information for now.

You also need to open the USEPWiki to refer to if some of the records follow a pattern, such as this in this example of the NPC_ record.  These are listed in this exact order several times.
<code>    
  wbRArray('Unknown - TINI, TINC, TINV, TIAS', wbRStruct('Unknown', [
      wbUnknown(TINI),
      wbUnknown(TINC),
      wbUnknown(TINV),
      wbUnknown(TIAS)
    ], []))
  ], True, nil, cpNormal, False, wbNPCAfterLoad);
</code>

Here is how WTHR was when I started writing this example.
<code>
// From the top of the file
  _0_IAD : TwbSignature = #0'IAD';
  _1_IAD : TwbSignature = #1'IAD';
  _2_IAD : TwbSignature = #2'IAD';
  _3_IAD : TwbSignature = #3'IAD';
  _4_IAD : TwbSignature = #4'IAD';
  _5_IAD : TwbSignature = #5'IAD';

// and then the routine itself.

  wbRecord(WTHR, 'Weather', [
    wbEDIDReq,
    wbFormIDCk(_0_IAD, 'Sunrise Image Space Modifier', [IMAD]),
    wbFormIDCk(_1_IAD, 'Day Image Space Modifier', [IMAD]),
    wbFormIDCk(_2_IAD, 'Sunset Image Space Modifier', [IMAD]),
    wbFormIDCk(_3_IAD, 'Night Image Space Modifier', [IMAD]),
    wbFormIDCk(_4_IAD, 'Unknown', [IMAD]),
    wbFormIDCk(_5_IAD, 'Unknown', [IMAD]),
    wbString(DNAM, 'Cloud Textures - Layer 0', 0, cpNormal, True),
    wbString(CNAM, 'Cloud Textures - Layer 1', 0, cpNormal, True),
    wbString(ANAM, 'Cloud Textures - Layer 2', 0, cpNormal, True),
    wbString(BNAM, 'Cloud Textures - Layer 3', 0, cpNormal, True),
    wbMODL,
    wbByteArray(LNAM, 'Unknown', 4, cpNormal, True),
    wbArray(ONAM, 'Cloud Speed', wbInteger('Layer', itU8{, wbDiv(2550)}), 4, nil, nil, cpNormal, True),
    wbByteArray(PNAM, 'Unused', 0, cpIgnore),
    wbArray(NAM0, 'Colors by Types/Times',
      wbArray('Type',
        wbStruct('Time', [
          wbInteger('Red', itU8),
          wbInteger('Green', itU8),
          wbInteger('Blue', itU8),
          wbByteArray('Unused', 1)
        ]),
        ['Sunrise', 'Day', 'Sunset', 'Night', 'High Noon', 'Midnight']
      ),
      ['Sky-Upper','Fog','Clouds-Lower','Ambient','Sunlight','Sun','Stars','Sky-Lower','Horizon','Clouds-Upper']
    , cpNormal, True),
    wbStruct(FNAM, 'Fog Distance', [
      wbFloat('Day - Near'),
      wbFloat('Day - Far'),
      wbFloat('Night - Near'),
      wbFloat('Night - Far'),
      wbFloat('Day - Power'),
      wbFloat('Night - Fower')
    ], cpNormal, True),
    wbByteArray(INAM, 'Unused', 304, cpIgnore, True),
    wbStruct(DATA, '', [
      wbInteger('Wind Speed', itU8),
      wbInteger('Cloud Speed (Lower)', itU8),
      wbInteger('Cloud Speed (Upper)', itU8),
      wbInteger('Trans Delta', itU8),
      wbInteger('Sun Glare', itU8),
      wbInteger('Sun Damage', itU8),
      wbInteger('Precipitation - Begin Fade In', itU8),
      wbInteger('Precipitation - End Fade Out', itU8),
      wbInteger('Thunder/Lightning - Begin Fade In', itU8),
      wbInteger('Thunder/Lightning - End Fade Out', itU8),
      wbInteger('Thunder/Lightning - Frequency', itU8),
      wbInteger('Weather Classification', itU8, wbWthrDataClassification),
      wbStruct('Lightning Color', [
        wbInteger('Red', itU8),
        wbInteger('Green', itU8),
        wbInteger('Blue', itU8)
      ])
    ], cpNormal, True),
    wbRArray('Sounds', wbStruct(SNAM, 'Sound', [
      wbFormIDCk('Sound', [SOUN]),
      wbInteger('Type', itU32, wbEnum([
       {0}'Default',
       {1}'Precip',
       {2}'Wind',
       {3}'Thunder'
      ]))
    ]))
  ]);
</code>

<code>
    00TX
    10TX
    20TX
    30TX
    <0TX
    =0TX
    >0TX
    ?0TX
    C0TX
    D0TX
    L0TX
</code> I don't know how those are handled yet I'm gonna skip those.

but after LNAM we have MNAM, NNAM, RNAM, and QNAM.  Those MUST come after LNAM.  Any one of those could be a FromID but I'm going to use wbUnknown as just an example for now.  I'll use another command for unknown [FormIDs] below.  
<code>
*snip*
    wbByteArray(LNAM, 'Unknown', 4, cpNormal, True),
    wbUnknown(MNAM),
    wbUnknown(NNAM),
    wbUnknown(RNAM),
    wbUnknown(QNAM),
    wbArray(ONAM, 'Cloud Speed', wbInteger('Layer', itU8{, wbDiv(2550)}), 4, nil, nil, cpNormal, True),
*snip*
</code>

After PNAM there is a JNAM
Before SNAM is NAM1
There are a bunch of TNAM after SNAM which the wiki says are [FormIDs].  If you didn't know that use wbUnknown(TNAM) however, I'm going to use "    wbFormID(TNAM, 'Unknown')," inside a Record Array function
<code>
    wbRArray('Unknown - TNAM', wbRStruct('Unknown', [
      wbFormID(TNAM, 'Unknown')
    ], []))
</code>
	
After all the TNAM entries are some more things that need to be defined:
<code>
  IMSP
  DALC
  DALC
  DALC
  DALC
  MODL
  MODT
</code> 

So something like this.	
<code>
    wbRArray('Unknown - TNAM', wbRStruct('Unknown', [
      wbFormID(TNAM, 'Unknown')
    ], [])),
    wbUnknown(IMSP),
    wbRArray('Unknown - DALC', wbRStruct('Unknown', [
      wbFormID(DALC, 'Unknown')
    ], [])),
    wbUnknown(MODL),
    wbUnknown(MODT)
  ]);
</code>

<code>
  IMSP
  DALC
	
  IMSP : TwbSignature = 'IMSP'; { New to Skyrim }
  DALC : TwbSignature = 'DALC'; { New to Skyrim }
</code>}
Those are new so they need to be entered as a constant at the top of the file.  Also add them in alphabetical order and with a comment that they are new. :D  

After all that and you re compile it, then xDump will give you different results.  Once you rinse and repeat, the record is defined and a decoder makes a ticket for the wiki team (Or just does it themselves) and then the USEPWiki has valid information for the community to refer to.

<code>
wbString(BNAM, 'Cloud Textures - Layer 3', 0, cpNormal, True),
wbMODL,
</code>

Now, with all that said though these are FNV structures and wbMODL could be in the wrong place.  To start decoding WTHR properly it's best to comment out ALL of the code.  Look at the order of things and then uncomment everything to fit that order.  Changing the order when needed.
File: Update.esm

[spoiler][code]
[4 Bytes for 'TES4' -- 20 Bytes No apparent pattern or Indication of an integer -- 24 bytes total]
TES4 -- 86 00 00 00 81 00 00 00 00 00 00 00 00 00 00 00 2B 00 00 00
[Integer: 0C 00 states the length of the integer]
HEDR -- 0C 00 D7 A3 70 3F 04 04 00 00 9C 09 00 FF
[Null terminated String: 08 00 states the length of the string]
CNAM -- 09 00 bnesmith 00
[Null terminated String: 09 00 states the length of the string]
MAST -- 0B 00 Skyrim.esm 00
[Integer: 08 00 states the length of the integer]
DATA -- 08 00 00 00 00 00 00 00 00 00
[Integer: 08 00 states the length of the integer]
ONAM -- 2C 00 5E 6D 0A 00 71 6D 0A 00 60 6D 0A 00 72 6D 0A 00 61 6D 0A 00 73 6D 0A 00 2D 4F 0C 00 D2 2E 10 00 5F 6D 0A 00 70 6D 0A 00 D2 9C 10 00
[Integer: 04 00 states the length of the integer]
INTV -- 04 00 17 00 00 00
[Integer: 04 00 states the length of the integer]
INCC -- 04 00 10 00 00 00
[Integer: 04 00 states the length of the integer]
GRUP -- 27 05 00 00
[Integer: 04 00 states the length of the integer]
GMST -- 00 00 00 00 09 6E 0E 00 00 00 00 00
[Integer: 04 00 states the length of the integer]
GMST -- 28 00 00 00 00 00 00 00 D7 4B 0D 00 19 71 55 00 2B 00 03 00
[Null terminated String: 18 00 states the length of the string]
EDID -- 18 00 sRestartToUseNewContent 00
[/code][/spoiler]

Test Plugin Name: TES5DumpGMST.esp

[spoiler][code]
[4 Bytes for 'TES4' -- 20 Bytes No apparent pattern or Indication of an integer -- 24 bytes total]
TES4 -- 68 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2B 00 00 00
[Integer: 0C 00 states the length of the integer]
HEDR -- 0C 00 D7 A3 70 3F 08 00 00 00 C6 12 00 00
[Null terminated String: 08 00 states the length of the string]
CNAM -- 08 00 DEFAULT 00
[Null terminated String: 09 00 states the length of the string]
MAST -- 0B 00 Skyrim.esm 00
[Integer: 08 00 states the length of the integer]
DATA -- 08 00 00 00 00 00 00 00 00 00
[Null terminated String: 09 00 states the length of the string]
MAST -- 0B 00 Update.esm 00
[Integer: 08 00 states the length of the integer]
DATA -- 08 00 00 00 00 00 00 00 00 00
[Integer: 04 00 states the length of the integer]
INTV -- 04 00 01 00 00 00
[Integer: 04 00 states the length of the integer]
GRUP -- F5 01 00 00
[Integer: 04 00 states the length of the integer]
GMST -- 00 00 00 00 02 73 00 00 00 00 00 00
[Integer: 04 00 states the length of the integer]
GMST -- 2B 00 00 00 00 00 00 00 BD B7 0E 00 00 00 00 00 2B 00 02 00
[Null terminated String: 18 00 states the length of the string]
EDID -- 12 00 sConfirmAttribute 00
[/code][/spoiler]

Currently for TES4:

[spoiler]
I'm trying to determine:
TES4: might be purely flags except bytes 17-18 (Or 2-3)
[code]TES4 -- 86 00 00 00 81 00 00 00 00 00 00 00 00 00 00 00 2B 00 00 00 (4 Bytes for 'TES4' -- 20 Bytes No apparent pattern or Indication of an integer -- 24 bytes total)
HEDR -- 0C 00 D7 A3 70 3F 04 04 00 00 9C 09 00 FF (Integer: 0C 00 states the length of the integer)
CNAM -- 09 00 62 6E 65 73 6D 69 74 68 00 (Null terminated String: 09 00 states the length of the string)
[/code]

In the DOS days the first few bytes indicated the file type.  The first few bytes of an EXE file would have different values than other files.  The file I currently looked at shows that an EXE and a DLL both have this for the first four bytes of the file.

[code]4D 5A 90 00[/code]

I'm also currious about this because I'm wondering if there are any other bytes at the begining of the plugins than are used by windows.  If there are then I can ignore them and changes can be made to the definition of 'TES4' since it is the very first part of the file.  This would also be useful for parsing through save game files at a later time.  For the plugins and, save game files I want to assure that the first few bytes are not interpreted incorrectly.

The first (or last) 16 Bytes in TES4:

These could be broken up any number of ways.  Those 16 bytes could be 8 flags two bytes each, or 4 flags of 4 bytes.  That will need to be determined.

The last (or first) Four bytes are as follows:

The two bytes "2B 00" are defined as the "Form Version" and that seems to be consistat so far.  The last two bytes after the "Form Version" are important but I am not sure how they are used exactly.  For GMST "00 00" is used for an integer, float, or Boolean. "02 00" is used for all string values.  There is not enough information for them to be localization pointers.  Currently I could use those two bytes as flags for GMST.  "02 00" is a valid binary value that could be represented as such for strings, while "00 00" would still indicate the other three integer types.
[/spoiler]

[quote name='Arthmoor' timestamp='1341351704' post='21136525']
Is that value even used at all by the CK or anything else? And if it is, does it make sense to have it broken up into two blocks?
[/quote]The old routines need to be verified to assure that they properly display Skyrim's information.  By breaking them up various ways a pattern could emerge to explain what the values are.  If left as it currently is, a four byte value, it could continue to be misleading.  

Currently for HEDR:

I'm trying to determine:
HEDR: Is there somewhere the CK indicates what the next value should be?
HEDR: Is it used by the CK as 'Next Object ID'?  If not what is it?
[code]TES4 -- 86 00 00 00 81 00 00 00 00 00 00 00 00 00 00 00 2B 00 00 00 (4 Bytes for 'TES4' -- 20 Bytes No apparent pattern, no apparent Indication of an integer -- 24 bytes total)
HEDR -- 0C 00 D7 A3 70 3F 04 04 00 00 9C 09 00 FF (Integer: 0C 00 states the length of the integer)
CNAM -- 09 00 62 6E 65 73 6D 69 74 68 00 (Null terminated String: 09 00 states the length of the string)
[/code]

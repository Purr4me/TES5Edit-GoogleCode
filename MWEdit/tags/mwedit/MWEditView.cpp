/*===========================================================================
 *
 * File:	MWEditView.CPP
 * Author:	Dave Humphrey (uesp@m0use.net)
 * Created On:	Monday, 03 February, 2003
 *
 * Implementation of the CMWEditView class.
 *
 *=========================================================================*/

	/* Include Files */
#include "stdafx.h"
#include "MWEdit.h"
#include "MWEditDoc.h"
#include "MWEditView.h"
#include "EsmFile.h"
#include "dl_time.h"
#include "EsmHeaderDlg.h"
#include "InputDialog.h"
#include "EsmCsvImportDlg.h"
#include "EsmScriptCompareDlg.h"


/*===========================================================================
 *
 * Begin Local Definitions
 *
 *=========================================================================*/
 	/* Debug definitions */
#ifdef _DEBUG
  #define new DEBUG_NEW
  #undef THIS_FILE
  static char THIS_FILE[] = __FILE__;
#endif

  IMPLEMENT_DYNCREATE(CMWEditView, CFormView);
  DEFINE_FILE("MWEditView.cpp");
/*===========================================================================
 *		End of Local Definitions
 *=========================================================================*/


/*===========================================================================
 *
 * Begin Object Column Data Array
 *
 * Used for formatting the object list for each type of item.
 *
 *=========================================================================*/
static esmcoldata_t l_ActivatorColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_LEFT,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_AlchemyColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_LEFT,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT }, 
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("AutoCalc"),	ESM_FIELD_AUTOCALC,	LVCFMT_CENTER,	ESMLIST_WIDTH_AUTOCALC,	ESMLIST_SUBITEM_AUTOCALC },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ApparatusColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_LEFT,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT }, 
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Quality"),	ESM_FIELD_QUALITY,	LVCFMT_CENTER,	ESMLIST_WIDTH_QUALITY,	ESMLIST_SUBITEM_QUALITY },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ArmorColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_LEFT,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT }, 
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Class"),		ESM_FIELD_CLASS,	LVCFMT_CENTER,	ESMLIST_WIDTH_CLASS,	ESMLIST_SUBITEM_CLASS },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Health"),	ESM_FIELD_HEALTH,	LVCFMT_CENTER,	ESMLIST_WIDTH_HEALTH,	ESMLIST_SUBITEM_HEALTH },
	{  _T("Rating"),	ESM_FIELD_RATING,	LVCFMT_CENTER,	ESMLIST_WIDTH_RATING,	ESMLIST_SUBITEM_RATING },
	{  _T("Enchant"),	ESM_FIELD_ENCHANT,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANT,	ESMLIST_SUBITEM_ENCHANT },
	{  _T("Enchant Pts"),	ESM_FIELD_ENCHANTPTS,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANTPTS,ESMLIST_SUBITEM_ENCHANTPTS },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_BirthSignColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Texture"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_ICON,	ESMLIST_SUBITEM_ICON }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_BodyPartColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Race"),		ESM_FIELD_RACE,		LVCFMT_CENTER,	ESMLIST_WIDTH_RACE,	ESMLIST_SUBITEM_RACE },
	{  _T("Part"),		ESM_FIELD_PART,		LVCFMT_CENTER,	ESMLIST_WIDTH_PART,	ESMLIST_SUBITEM_PART }, 
	{  _T("Female"),	ESM_FIELD_FEMALE,	LVCFMT_CENTER,	ESMLIST_WIDTH_FEMALE,	ESMLIST_SUBITEM_FEMALE }, 
	{  _T("Playable"),	ESM_FIELD_PLAYABLE,	LVCFMT_CENTER,	ESMLIST_WIDTH_PLAYABLE,	ESMLIST_SUBITEM_PLAYABLE }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_BookColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Scroll"),	ESM_FIELD_SCROLL,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCROLL,	ESMLIST_SUBITEM_SCROLL }, 
	{  _T("Teaches"),	ESM_FIELD_TEACHES,	LVCFMT_CENTER,	ESMLIST_WIDTH_TEACHES,	ESMLIST_SUBITEM_TEACHES }, 
	{  _T("Enchant"),	ESM_FIELD_ENCHANT,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANT,	ESMLIST_SUBITEM_ENCHANT },
	{  _T("Enchant Pts"),	ESM_FIELD_ENCHANTPTS,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANTPTS,ESMLIST_SUBITEM_ENCHANTPTS },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_CellColData[] = {
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Grid"),		ESM_FIELD_GRID,		LVCFMT_CENTER,	ESMLIST_WIDTH_GRID,	ESMLIST_SUBITEM_GRID }, 
	{  _T("Ref Count"),	ESM_FIELD_REFCOUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_REFCOUNT,	ESMLIST_SUBITEM_REFCOUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ClassColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Playable"),	ESM_FIELD_PLAYABLE,	LVCFMT_CENTER,	ESMLIST_WIDTH_PLAYABLE,	ESMLIST_SUBITEM_PLAYABLE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ClothingColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_LEFT,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Enchant"),	ESM_FIELD_ENCHANT,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANT,	ESMLIST_SUBITEM_ENCHANT },
	{  _T("Enchant Pts"),	ESM_FIELD_ENCHANTPTS,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANTPTS,ESMLIST_SUBITEM_ENCHANTPTS },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ContainerColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Organic"),	ESM_FIELD_ORGANIC,	LVCFMT_CENTER,	ESMLIST_WIDTH_ORGANIC,	ESMLIST_SUBITEM_ORGANIC },
	{  _T("Respawns"),	ESM_FIELD_RESPAWN,	LVCFMT_LEFT,	ESMLIST_WIDTH_RESPAWN,	ESMLIST_SUBITEM_RESPAWN }, 
	{  _T("Item List"),	ESM_FIELD_LIST,		LVCFMT_LEFT,	ESMLIST_WIDTH_LIST,	ESMLIST_SUBITEM_LIST },
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_CreatureColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Sound"),		ESM_FIELD_SOUND,	LVCFMT_LEFT,	ESMLIST_WIDTH_SOUND,	ESMLIST_SUBITEM_SOUND },
	{  _T("Level"),		ESM_FIELD_LEVEL,	LVCFMT_CENTER,	ESMLIST_WIDTH_LEVEL,	ESMLIST_SUBITEM_LEVEL },
	{  _T("Essential"),	ESM_FIELD_ESSENTIAL,	LVCFMT_LEFT,	ESMLIST_WIDTH_ESSENTIAL,ESMLIST_SUBITEM_ESSENTIAL }, 
	{  _T("Respawns"),	ESM_FIELD_RESPAWN,	LVCFMT_LEFT,	ESMLIST_WIDTH_RESPAWN,	ESMLIST_SUBITEM_RESPAWN }, 
	{  _T("Move Type"),	ESM_FIELD_MOVEMENT,	LVCFMT_LEFT,	ESMLIST_WIDTH_MOVEMENT,	ESMLIST_SUBITEM_MOVEMENT },
	{  _T("Weap/Shld"),	ESM_FIELD_WEAPSHLD,	LVCFMT_LEFT,	ESMLIST_WIDTH_WEAPSHLD,	ESMLIST_SUBITEM_WEAPSHLD },  
	{  _T("Biped"),		ESM_FIELD_BIPED,	LVCFMT_LEFT,	ESMLIST_WIDTH_BIPED,	ESMLIST_SUBITEM_BIPED },
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_DialogColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_LEFT,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_DoorColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_EnchantColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Charge"),	ESM_FIELD_CHARGE,	LVCFMT_LEFT,	ESMLIST_WIDTH_CHARGE,	ESMLIST_SUBITEM_CHARGE }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Cost"),		ESM_FIELD_COST,		LVCFMT_CENTER,	ESMLIST_WIDTH_COST,	ESMLIST_SUBITEM_COST }, 
	{  _T("AutoCalc"),	ESM_FIELD_AUTOCALC,	LVCFMT_CENTER,	ESMLIST_WIDTH_AUTOCALC,	ESMLIST_SUBITEM_AUTOCALC },
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_FactionColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_GameSettingColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_LEFT,	ESMLIST_WIDTH_VALUE*4,	ESMLIST_SUBITEM_VALUE },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_GlobalColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE/2,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE*2,	ESMLIST_SUBITEM_VALUE },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };


static esmcoldata_t l_IngrediantColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Effect1"),	ESM_FIELD_EFFECT1,	LVCFMT_LEFT,	ESMLIST_WIDTH_EFFECT,	ESMLIST_SUBITEM_EFFECT1 },
	{  _T("Effect2"),	ESM_FIELD_EFFECT2,	LVCFMT_LEFT,	ESMLIST_WIDTH_EFFECT,	ESMLIST_SUBITEM_EFFECT2 },
	{  _T("Effect3"),	ESM_FIELD_EFFECT3,	LVCFMT_LEFT,	ESMLIST_WIDTH_EFFECT,	ESMLIST_SUBITEM_EFFECT3 },
	{  _T("Effect4"),	ESM_FIELD_EFFECT4,	LVCFMT_LEFT,	ESMLIST_WIDTH_EFFECT,	ESMLIST_SUBITEM_EFFECT4 },
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_LevelCreaColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("AllPC"),		ESM_FIELD_ALLPC,	LVCFMT_CENTER,	ESMLIST_WIDTH_ALLPC,	ESMLIST_SUBITEM_ALLPC }, 
	{  _T("Creature List"),	ESM_FIELD_LIST,		LVCFMT_LEFT,	ESMLIST_WIDTH_LIST,	ESMLIST_SUBITEM_LIST },
	{  _T("Chance None"),	ESM_FIELD_CHANCENONE,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANCENONE,ESMLIST_SUBITEM_CHANCENONE}, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_LevelItemColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("AllPC"),		ESM_FIELD_ALLPC,	LVCFMT_CENTER,	ESMLIST_WIDTH_ALLPC,	ESMLIST_SUBITEM_ALLPC }, 
	{  _T("Item List"),	ESM_FIELD_LIST,		LVCFMT_LEFT,	ESMLIST_WIDTH_LIST,	ESMLIST_SUBITEM_LIST },
	{  _T("Chance None"),	ESM_FIELD_CHANCENONE,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANCENONE,ESMLIST_SUBITEM_CHANCENONE }, 
	{  _T("Calc Each"),	ESM_FIELD_CALCEACH,	LVCFMT_CENTER,	ESMLIST_WIDTH_CALCEACH, ESMLIST_SUBITEM_CALCEACH }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_LightColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Sound"),		ESM_FIELD_SOUND,	LVCFMT_CENTER,	ESMLIST_WIDTH_SOUND,	ESMLIST_SUBITEM_SOUND },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Time"),		ESM_FIELD_TIME,		LVCFMT_CENTER,	ESMLIST_WIDTH_TIME,	ESMLIST_SUBITEM_TIME }, 
	{  _T("Radius"),	ESM_FIELD_RADIUS,	LVCFMT_CENTER,	ESMLIST_WIDTH_RADIUS,	ESMLIST_SUBITEM_RADIUS },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_LockColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Uses"),		ESM_FIELD_USES,		LVCFMT_CENTER,	ESMLIST_WIDTH_USES,	ESMLIST_SUBITEM_USES },
	{  _T("Quality"),	ESM_FIELD_QUALITY,	LVCFMT_CENTER,	ESMLIST_WIDTH_QUALITY,	ESMLIST_SUBITEM_QUALITY },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_MagicEffectColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("School"),	ESM_FIELD_SCHOOL,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCHOOL,	ESMLIST_SUBITEM_SCHOOL },
	{  _T("Cost"),		ESM_FIELD_COST,		LVCFMT_CENTER,	ESMLIST_WIDTH_COST,	ESMLIST_SUBITEM_COST },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_MiscColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Unknown"),	ESM_FIELD_UNKNOWN,	LVCFMT_CENTER,	ESMLIST_WIDTH_UNKNOWN,	ESMLIST_SUBITEM_UNKNOWN },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_NPCColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Level"),		ESM_FIELD_LEVEL,	LVCFMT_CENTER,	ESMLIST_WIDTH_LEVEL,	ESMLIST_SUBITEM_LEVEL },
	{  _T("Race"),		ESM_FIELD_RACE,		LVCFMT_CENTER,	ESMLIST_WIDTH_RACE,	ESMLIST_SUBITEM_RACE },
	{  _T("Female"),	ESM_FIELD_FEMALE,	LVCFMT_CENTER,	ESMLIST_WIDTH_FEMALE,	ESMLIST_SUBITEM_FEMALE },
	{  _T("Class"),		ESM_FIELD_CLASS,	LVCFMT_CENTER,	ESMLIST_WIDTH_CLASS,	ESMLIST_SUBITEM_CLASS }, 
	{  _T("Faction"),	ESM_FIELD_FACTION,	LVCFMT_CENTER,	ESMLIST_WIDTH_FACTION,	ESMLIST_SUBITEM_FACTION }, 
	{  _T("Rank"),		ESM_FIELD_RANK,		LVCFMT_CENTER,	ESMLIST_WIDTH_RANK,	ESMLIST_SUBITEM_RANK },
	{  _T("AutoCalc"),	ESM_FIELD_AUTOCALC,	LVCFMT_CENTER,	ESMLIST_WIDTH_AUTOCALC,	ESMLIST_SUBITEM_AUTOCALC }, 
	{  _T("Repawns"),	ESM_FIELD_RESPAWN,	LVCFMT_CENTER,	ESMLIST_WIDTH_RESPAWN,	ESMLIST_SUBITEM_RESPAWN }, 
	{  _T("Animation"),	ESM_FIELD_ANIMATION,	LVCFMT_CENTER,	ESMLIST_WIDTH_ANIMATION,ESMLIST_SUBITEM_ANIMATION }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{  _T("Head"),		ESM_FIELD_HEAD,		LVCFMT_CENTER,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_HEAD }, 
	{  _T("Hair"),		ESM_FIELD_HAIR,		LVCFMT_CENTER,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_HAIR },

	{  _T("Gold"),		ESM_FIELD_GOLD,			LVCFMT_CENTER,	ESMLIST_WIDTH_GOLD,	ESMLIST_SUBITEM_GOLD },
	{  _T("Fight"),		ESM_FIELD_FIGHT,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_FIGHT },
	{  _T("Alarm"),		ESM_FIELD_ALARM,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_ALARM },
	{  _T("Flee"),		ESM_FIELD_FLEE,			LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_FLEE },
	{  _T("Hello"),		ESM_FIELD_HELLO,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_HELLO },
	{  _T("Apparatus"),	ESM_FIELD_NPCAPPARATUS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCAPPARATUS },
	{  _T("Armors"),	ESM_FIELD_NPCARMORS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCARMORS },
	{  _T("Books"),		ESM_FIELD_NPCBOOKS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCBOOKS },
	{  _T("Clothing"),	ESM_FIELD_NPCCLOTHING,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCCLOTHING },
	{  _T("Ingredients"),	ESM_FIELD_NPCINGREDIANTS,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCINGREDIANTS },
	{  _T("Lights"),	ESM_FIELD_NPCLIGHTS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCLIGHTS },
	{  _T("Picks"),		ESM_FIELD_NPCLOCKPICKS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCLOCKPICKS },
	{  _T("Misc"),		ESM_FIELD_NPCMISC,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCMISC },
	{  _T("Probes"),	ESM_FIELD_NPCPROBES,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCPROBES },
	{  _T("Potions"),	ESM_FIELD_NPCPOTIONS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCPOTIONS },
	{  _T("Repair Items"),	ESM_FIELD_NPCREPAIRITEMS,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCREPAIRITEMS },
	{  _T("Magic Items"),	ESM_FIELD_NPCMAGICITEMS,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCMAGICITEMS },
	{  _T("Spells"),	ESM_FIELD_NPCSPELLS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCSPELLS },
	{  _T("Weapons"),	ESM_FIELD_NPCWEAPONS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCWEAPONS },
	{  _T("Enchanter"),	ESM_FIELD_NPCENCHANT,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCENCHANT },
	{  _T("Spellmaker"),	ESM_FIELD_NPCSPELLMAKER,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCSPELLMAKER },
	{  _T("Trainer"),	ESM_FIELD_NPCTRAINING,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCTRAINING },
	{  _T("Repairs"),	ESM_FIELD_NPCREPAIRS,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCREPAIRS },
	{  _T("Travel1"),	ESM_FIELD_NPCTRAVEL1,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCTRAVEL1 },
	{  _T("Travel2"),	ESM_FIELD_NPCTRAVEL2,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCTRAVEL2 },
	{  _T("Travel3"),	ESM_FIELD_NPCTRAVEL3,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCTRAVEL3 },
	{  _T("Travel4"),	ESM_FIELD_NPCTRAVEL4,		LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_NPCTRAVEL4 },

	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ProbeColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Uses"),		ESM_FIELD_USES,		LVCFMT_CENTER,	ESMLIST_WIDTH_USES,	ESMLIST_SUBITEM_USES },
	{  _T("Quality"),	ESM_FIELD_QUALITY,	LVCFMT_CENTER,	ESMLIST_WIDTH_QUALITY,	ESMLIST_SUBITEM_QUALITY },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_RaceColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Playable"),	ESM_FIELD_PLAYABLE,	LVCFMT_CENTER,	ESMLIST_WIDTH_PLAYABLE,	ESMLIST_SUBITEM_PLAYABLE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_RegionColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Creature"),	ESM_FIELD_CREATURE,	LVCFMT_CENTER,	ESMLIST_WIDTH_CREATURE, ESMLIST_SUBITEM_CREATURE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_RepairColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_CENTER,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT },
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Uses"),		ESM_FIELD_USES,		LVCFMT_CENTER,	ESMLIST_WIDTH_USES,	ESMLIST_SUBITEM_USES },
	{  _T("Quality"),	ESM_FIELD_QUALITY,	LVCFMT_CENTER,	ESMLIST_WIDTH_QUALITY,	ESMLIST_SUBITEM_QUALITY },
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_ScriptColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Size"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_SkillColData[] = {
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Attribute"),	ESM_FIELD_ATTRIBUTE,	LVCFMT_CENTER,	ESMLIST_WIDTH_ATTRIBUTE,ESMLIST_SUBITEM_ATTRIBUTE }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_SoundGenColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Creature"),	ESM_FIELD_CREATURE,	LVCFMT_CENTER,	ESMLIST_WIDTH_CREATURE,	ESMLIST_SUBITEM_CREATURE },
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE },
	{  _T("Sound"),		ESM_FIELD_SOUND,	LVCFMT_CENTER,	ESMLIST_WIDTH_SOUND,	ESMLIST_SUBITEM_SOUND },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_SoundColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Volume"),	ESM_FIELD_VOLUME,	LVCFMT_CENTER,	ESMLIST_WIDTH_VOLUME,	ESMLIST_SUBITEM_VOLUME },
	{  _T("Min Range"),	ESM_FIELD_MINRANGE,	LVCFMT_CENTER,	ESMLIST_WIDTH_MINRANGE,	ESMLIST_SUBITEM_MINRANGE },
	{  _T("Max Range"),	ESM_FIELD_MAXRANGE,	LVCFMT_CENTER,	ESMLIST_WIDTH_MAXRANGE,	ESMLIST_SUBITEM_MAXRANGE },
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 	
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };


static esmcoldata_t l_SpellColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE },
	{  _T("Cost"),		ESM_FIELD_COST,		LVCFMT_CENTER,	ESMLIST_WIDTH_COST,	ESMLIST_SUBITEM_COST },
	{  _T("AutoCalc"),	ESM_FIELD_AUTOCALC,	LVCFMT_CENTER,	ESMLIST_WIDTH_AUTOCALC,	ESMLIST_SUBITEM_AUTOCALC }, 
	{  _T("PCStart"),	ESM_FIELD_PCSTART,	LVCFMT_CENTER,	ESMLIST_WIDTH_PCSTART,	ESMLIST_SUBITEM_PCSTART }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_StartScriptColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };


static esmcoldata_t l_StaticColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

static esmcoldata_t l_WeaponColData[] = {
	{  _T("ID"),		ESM_FIELD_ID,		LVCFMT_LEFT,	ESMLIST_WIDTH_ID,	ESMLIST_SUBITEM_ID,	NULL }, 
	{  _T("Count"),		ESM_FIELD_COUNT,	LVCFMT_CENTER,	ESMLIST_WIDTH_COUNT,	ESMLIST_SUBITEM_COUNT }, 
	{  _T("Mod"),		ESM_FIELD_CHANGED,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHANGED,	ESMLIST_SUBITEM_CHANGED }, 
	{  _T("Type"),		ESM_FIELD_TYPE,		LVCFMT_CENTER,	ESMLIST_WIDTH_TYPE,	ESMLIST_SUBITEM_TYPE }, 
	{  _T("Name"),		ESM_FIELD_NAME,		LVCFMT_LEFT,	ESMLIST_WIDTH_NAME,	ESMLIST_SUBITEM_NAME }, 
	{  _T("Script"),	ESM_FIELD_SCRIPT,	LVCFMT_LEFT,	ESMLIST_WIDTH_SCRIPT,	ESMLIST_SUBITEM_SCRIPT }, 
	{  _T("Weight"),	ESM_FIELD_WEIGHT,	LVCFMT_CENTER,	ESMLIST_WIDTH_WEIGHT,	ESMLIST_SUBITEM_WEIGHT },
	{  _T("Health"),	ESM_FIELD_HEALTH,	LVCFMT_CENTER,	ESMLIST_WIDTH_HEALTH,	ESMLIST_SUBITEM_HEALTH },
	{  _T("Value"),		ESM_FIELD_VALUE,	LVCFMT_CENTER,	ESMLIST_WIDTH_VALUE,	ESMLIST_SUBITEM_VALUE },
	{  _T("Enchant"),	ESM_FIELD_ENCHANT,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANT,	ESMLIST_SUBITEM_ENCHANT },
	{  _T("Enchant Pts"),	ESM_FIELD_ENCHANTPTS,	LVCFMT_CENTER,	ESMLIST_WIDTH_ENCHANTPTS,ESMLIST_SUBITEM_ENCHANTPTS },
	{  _T("Speed"),		ESM_FIELD_SPEED,	LVCFMT_CENTER,	ESMLIST_WIDTH_SPEED,	ESMLIST_SUBITEM_SPEED }, 
	{  _T("Reach"),		ESM_FIELD_REACH,	LVCFMT_CENTER,	ESMLIST_WIDTH_REACH,	ESMLIST_SUBITEM_REACH }, 
	{  _T("Copy Min"),	ESM_FIELD_CHOPMIN,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHOPMIN,	ESMLIST_SUBITEM_CHOPMIN },
	{  _T("Copy Max"),	ESM_FIELD_CHOPMAX,	LVCFMT_CENTER,	ESMLIST_WIDTH_CHOPMAX,	ESMLIST_SUBITEM_CHOPMAX },
	{  _T("Slash Min"),	ESM_FIELD_SLASHMIN,	LVCFMT_CENTER,	ESMLIST_WIDTH_SLASHMIN,	ESMLIST_SUBITEM_SLASHMIN },
	{  _T("Slash Max"),	ESM_FIELD_SLASHMAX,	LVCFMT_CENTER,	ESMLIST_WIDTH_SLASHMAX,	ESMLIST_SUBITEM_SLASHMAX },
	{  _T("Thurst Min"),	ESM_FIELD_THRUSTMIN,	LVCFMT_CENTER,	ESMLIST_WIDTH_THRUSTMIN,ESMLIST_SUBITEM_THRUSTMIN },
	{  _T("Thrust Max"),	ESM_FIELD_THRUSTMAX,	LVCFMT_CENTER,	ESMLIST_WIDTH_THRUSTMAX,ESMLIST_SUBITEM_THRUSTMAX },
	{  _T("Ignore Resist"),	ESM_FIELD_IGNORERESIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_IGNORERESIST,ESMLIST_SUBITEM_IGNORERESIST }, 
	{  _T("Inventory"),	ESM_FIELD_ICON,		LVCFMT_LEFT,	ESMLIST_WIDTH_INVENTORY,ESMLIST_SUBITEM_INVENTORY }, 
	{  _T("Model"),		ESM_FIELD_MODEL,	LVCFMT_LEFT,	ESMLIST_WIDTH_MODEL,	ESMLIST_SUBITEM_MODEL }, 
	{  _T("Persist"),	ESM_FIELD_PERSIST,	LVCFMT_CENTER,	ESMLIST_WIDTH_PERSIST,	ESMLIST_SUBITEM_PERSIST }, 
	{  _T("Blocked"),	ESM_FIELD_BLOCKED,	LVCFMT_CENTER,	ESMLIST_WIDTH_BLOCKED,	ESMLIST_SUBITEM_BLOCKED },
	{ NULL, 0, 0, 0 }	/* Must be last record */
 };

/*===========================================================================
 *		End of Object Column Data Array
 *=========================================================================*/


/*===========================================================================
 *
 * Begin Tab Info Array
 *
 *=========================================================================*/
esmtabinfo_t l_RecordTabData[] = {
	{ OBJECT_TAB_ACTIVATOR,		_T("Activator"),	MWESM_REC_ACTI,	l_ActivatorColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_ALCHEMY,		_T("Alchemy"),		MWESM_REC_ALCH, l_AlchemyColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_APPARATUS,		_T("Apparatus"),	MWESM_REC_APPA, l_ApparatusColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_ARMOR,		_T("Armor"),		MWESM_REC_ARMO, l_ArmorColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_BIRTHSIGN,		_T("Birth Sign"),	MWESM_REC_BSGN, l_BirthSignColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_BODYPART,		_T("Body Part"),	MWESM_REC_BODY, l_BodyPartColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_BOOK,		_T("Book"),		MWESM_REC_BOOK, l_BookColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_CELL,		_T("Cell"),		MWESM_REC_CELL, l_CellColData,		ESM_FIELD_NAME,	NULL },
	{ OBJECT_TAB_CLASS,		_T("Class"),		MWESM_REC_CLAS, l_ClassColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_CLOTHING,		_T("Clothing"),		MWESM_REC_CLOT, l_ClothingColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_CONTAINER,		_T("Container"),	MWESM_REC_CONT, l_ContainerColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_CREATURE,		_T("Creature"),		MWESM_REC_CREA, l_CreatureColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_DIALOG,		_T("Dialogue"),		MWESM_REC_DIAL, l_DialogColData,	ESM_FIELD_ID,	CMWEditView::FillTopicList },
	{ OBJECT_TAB_JOURNAL,		_T("Journal"),		MWESM_REC_DIAL, l_DialogColData,	ESM_FIELD_ID,	CMWEditView::FillJournalList },
	{ OBJECT_TAB_GREETING,		_T("Greeting"),		MWESM_REC_DIAL, l_DialogColData,	ESM_FIELD_ID,	CMWEditView::FillGreetingList },
	{ OBJECT_TAB_VOICE,		_T("Voice"),		MWESM_REC_DIAL, l_DialogColData,	ESM_FIELD_ID,	CMWEditView::FillVoiceList },
	{ OBJECT_TAB_PERSUASION,	_T("Persuasion"),	MWESM_REC_DIAL, l_DialogColData,	ESM_FIELD_ID,	CMWEditView::FillPersuasionList },
	{ OBJECT_TAB_DOOR,		_T("Door"),		MWESM_REC_DOOR, l_DoorColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_ENCHANT,		_T("Enchanting"),	MWESM_REC_ENCH, l_EnchantColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_FACTION,		_T("Faction"),		MWESM_REC_FACT, l_FactionColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_GAMESETTING,	_T("Game Setting"),	MWESM_REC_GMST, l_GameSettingColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_GLOBAL,		_T("Global"),		MWESM_REC_GLOB, l_GlobalColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_INGREDIANT,	_T("Ingredient"),	MWESM_REC_INGR, l_IngrediantColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_LEVELCREA,		_T("Level Creature"),	MWESM_REC_LEVC, l_LevelCreaColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_LEVELITEM,		_T("Level Item"),	MWESM_REC_LEVI, l_LevelItemColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_LIGHT,		_T("Light"),		MWESM_REC_LIGH, l_LightColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_LOCKPICK,		_T("Lockpick"),		MWESM_REC_LOCK, l_LockColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_MAGICEFFECT,	_T("Magic Effect"),	MWESM_REC_MGEF, l_MagicEffectColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_MISC,		_T("Misc"),		MWESM_REC_MISC, l_MiscColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_NPC,		_T("NPC"),		MWESM_REC_NPC_, l_NPCColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_PROBE,		_T("Probe"),		MWESM_REC_PROB, l_ProbeColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_RACE,		_T("Race"),		MWESM_REC_RACE, l_RaceColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_REGION,		_T("Region"),		MWESM_REC_REGN, l_RegionColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_REPAIR,		_T("Repair"),		MWESM_REC_REPA, l_RepairColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_SCRIPT,		_T("Script"),		MWESM_REC_SCPT, l_ScriptColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_SKILL,		_T("Skill"),		MWESM_REC_SKIL, l_SkillColData,		ESM_FIELD_NAME,	NULL },
	{ OBJECT_TAB_SOUND,		_T("Sound"),		MWESM_REC_SOUN, l_SoundColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_SOUNDGEN,		_T("Sound Gen"),	MWESM_REC_SNDG, l_SoundGenColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_SPELL,		_T("Spell"),		MWESM_REC_SPEL, l_SpellColData,		ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_STARTSCRIPT,	_T("Start Script"),	MWESM_REC_SSCR, l_StartScriptColData,	ESM_FIELD_NAME,	NULL },
	{ OBJECT_TAB_STATIC,		_T("Static"),		MWESM_REC_STAT, l_StaticColData,	ESM_FIELD_ID,	NULL },
	{ OBJECT_TAB_WEAPON,		_T("Weapon"),		MWESM_REC_WEAP, l_WeaponColData,	ESM_FIELD_ID,	NULL },
	{ 0, NULL, NULL }	/* Must be last entry */
 };
/*===========================================================================
 *		End of Tab Info Array
 *=========================================================================*/


/*===========================================================================
 *
 * Begin Class CMWEditView Message Map
 *
 *=========================================================================*/
BEGIN_MESSAGE_MAP(CMWEditView, CFormView)
  //{{AFX_MSG_MAP(CMWEditView)
  ON_WM_SIZE()
  ON_NOTIFY(LVN_COLUMNCLICK, IDC_OBJECTLIST, OnColumnclickObjectlist)
  ON_COMMAND(ID_VIEW_VIEWACTIVE, OnViewViewactive)
  ON_UPDATE_COMMAND_UI(ID_VIEW_VIEWACTIVE, OnUpdateViewViewactive)
  ON_WM_DESTROY()
  ON_COMMAND(ID_EDIT_ADDNEW, OnEditAddnew)
  ON_WM_CONTEXTMENU()
  ON_COMMAND(ID_EDIT_EDITITEM, OnEdititem)
  ON_WM_CLOSE()
  ON_LBN_SELCHANGE(IDC_TYPELIST, OnSelchangeTypelist)
  ON_COMMAND(ID_EDIT_DELETE, OnEditDelete)
  ON_COMMAND(ID_EDIT_CLEAN, OnEditClean)
  ON_UPDATE_COMMAND_UI(ID_EDIT_ADDNEW, OnUpdateEditAddnew)
  ON_UPDATE_COMMAND_UI(ID_EDIT_EDITITEM, OnUpdateEditEdititem)
  ON_UPDATE_COMMAND_UI(ID_EDIT_DELETE, OnUpdateEditDelete)
  ON_UPDATE_COMMAND_UI(ID_EDIT_CLEAN, OnUpdateEditClean)
  ON_COMMAND(ID_EDIT_OUTPUTRECINFO, OnEditOutputrecinfo)
  ON_COMMAND(ID_EDIT_TESTFIND, OnEditTestfind)
  ON_COMMAND(ID_EDIT_PLUGININFO, OnEditPlugininfo)
  ON_COMMAND(ID_EDIT_FINDTEXT, OnEditFindtext)
  ON_MESSAGE(ESMLIST_NOTIFY_ONKEY, OnRecordKey)
  ON_MESSAGE(ESMLIST_NOTIFY_ONDROP, OnRecordDrop)
  ON_COMMAND(ID_EDIT_CREATECOPY, OnEditCreatecopy)
  ON_UPDATE_COMMAND_UI(ID_EDIT_CREATECOPY, OnUpdateEditCreatecopy)
  ON_COMMAND(ID_EDIT_RENAME, OnEditRename)
  ON_UPDATE_COMMAND_UI(ID_EDIT_RENAME, OnUpdateEditRename)
  ON_COMMAND(ID_IMPORT_SCRIPT, OnImportScript)
  ON_COMMAND(ID_EXPORT_RECORDS, OnExportRecords)
  ON_COMMAND(ID_TEST_GETTYPE, OnTestGettype)
  ON_COMMAND(ID_EDIT_INFO, OnEditInfo)
  ON_UPDATE_COMMAND_UI(ID_EDIT_INFO, OnUpdateEditInfo)
  ON_COMMAND(ID_EDIT_SCRIPTTEMPLATE, OnEditScripttemplate)
  ON_COMMAND(ID_FILE_IMPORT_CSVRECORDS, OnFileImportCsvrecords)
  ON_UPDATE_COMMAND_UI(ID_FILE_IMPORT_CSVRECORDS, OnUpdateFileImportCsvrecords)
  ON_COMMAND(ID_FILE_EXPORT_CSV, OnFileExportCsv)
  ON_UPDATE_COMMAND_UI(ID_FILE_EXPORT_CSV, OnUpdateFileExportCsv)
  ON_UPDATE_COMMAND_UI(ID_FILE_EXPORT_SPELLMERCHANTS, OnUpdateFileExportSpellmerchants)
  ON_COMMAND(ID_FILE_EXPORT_SPELLMERCHANTS, OnFileExportSpellmerchants)
  ON_COMMAND(ID_TEST_COMPARESCRIPTS, OnTestComparescripts)
  ON_COMMAND(ID_EDIT_COMPILEACTIVESCRIPTS, OnEditCompileactivescripts)
  ON_UPDATE_COMMAND_UI(ID_EXPORT_RECORDS, OnUpdateEditEdititem)
	ON_COMMAND(ID_EDIT_MAKEACTIVE, OnEditMakeactive)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()
/*===========================================================================
 *		End of Class CMWEditView Message Map
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Constructor
 *
 *=========================================================================*/
CMWEditView::CMWEditView() : CFormView(CMWEditView::IDD) {
  //{{AFX_DATA_INIT(CMWEditView)
  //}}AFX_DATA_INIT
  m_pCurrentType = NULL;
 }
/*===========================================================================
 *		End of Class CMWEditView Constructor
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Destructor
 *
 *=========================================================================*/
CMWEditView::~CMWEditView() {
 }
/*===========================================================================
 *		End of Class CMWEditView Destructor
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void DoDataExchange (pDX);
 *
 *=========================================================================*/
void CMWEditView::DoDataExchange(CDataExchange* pDX) {
  CFormView::DoDataExchange(pDX);
  //{{AFX_DATA_MAP(CMWEditView)
  DDX_Control(pDX, IDC_TYPELIST, m_TypeList);
  DDX_Control(pDX, IDC_OBJECTLIST, m_ObjectList);
  //}}AFX_DATA_MAP
 }
/*===========================================================================
 *		End of Class Method CMWEditView::DoDataExchange()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void ExportScripts (void);
 *
 * Exports the currently selected scripts in the object list to text files.
 *
 *=========================================================================*/
void CMWEditView::ExportScripts (void) {
  CFileDialog FileDlg(FALSE, _T("txt"), NULL, OFN_HIDEREADONLY,	ESM_IMPORTSCPT_FILTER, this);
  CString	PathBuffer;
  esmrecinfo_t* pRecInfo;
  CEsmScript*	pScript;
  POSITION	ListPos;
  int		Result;
  int		Index;

	/* Display the file dialog */
  FileDlg.m_ofn.lpstrTitle = _T("Select Script Output Path");
  Result = FileDlg.DoModal();
  if (Result != IDOK) return;

	/* Get the output pathname */
  ExtractPath(PathBuffer.GetBuffer(_MAX_PATH), FileDlg.GetPathName(), _MAX_PATH);
  PathBuffer.ReleaseBuffer();

	/* Output all script objects */
  ListPos = m_ObjectList.GetFirstSelectedItemPosition();

  while (ListPos != NULL) {
    Index = m_ObjectList.GetNextSelectedItem(ListPos);
    pRecInfo = m_ObjectList.GetRecInfo(Index);
    if (pRecInfo == NULL) continue;

		/* Attempt to output the script */
    pScript = (CEsmScript *) pRecInfo->pRecord;
    Result = pScript->ExportScript(PathBuffer);
    if (!Result) ErrorHandler.Notify(_T("Script Export Error"));
   }

 }
/*===========================================================================
 *		End of Class Method CMWEditView::ExportScripts()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - int FindTabInfo (pType);
 *
 * Attempts to find and return the tab info record index for the given record
 * type. Returns -1 if it is not found.
 *
 *=========================================================================*/
int CMWEditView::FindTabInfo (const TCHAR* pType) {
  int		Index;

  for (Index = 0; l_RecordTabData[Index].ItemType != NULL; Index++) {
    if (TSTRNCMP(l_RecordTabData[Index].ItemType, pType, 4) == 0) return (Index);
   }

  return (-1);
 }
/*===========================================================================
 *		End of Class Method CMWEditView::FindTabInfo()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void FillDialogueList (pColData, DialType);
 *
 * Fills the object list with dialogue objects of the given type.
 *
 *=========================================================================*/
void CMWEditView::FillDialogueList (esmcoldata_t* pColData, const int DialType) {
  esmrecinfo_t* pRecInfo;
  CEsmDialogue* pDialogue;
  int		ArrayIndex;
  int		Count;
  bool		ViewChanged = GetDocument()->GetViewChanged();

	/* Initialize the list */
  m_ObjectList.SetRedraw(FALSE);
  m_ObjectList.InitObjectList(pColData);

	/* Ensure the column data is valid */
  if (pColData == NULL) {
    m_ObjectList.SetRedraw(TRUE);
    return;
   }

	/* Start the search */
  m_pCurrentType = MWESM_REC_DIAL;
  pRecInfo = GetDocument()->FindFirstRecord(MWESM_REC_DIAL, ArrayIndex);
  Count = 0;

	/* Find all dialogue records */
  while (pRecInfo != NULL) {
    pDialogue = (CEsmDialogue *) pRecInfo->pRecord;

		/* Don't add if it isn't the correct dialogue type */
    if (pDialogue->GetDialogTypeID() == DialType) {

		/* Don't add if we only wish to view active records */
        if (!ViewChanged || pRecInfo->pFile->IsActive()) {
        m_ObjectList.AddItem(pRecInfo);
        Count++;
       }
     }

    pRecInfo = GetDocument()->FindNextRecord(MWESM_REC_DIAL, ArrayIndex);
   }

  m_ObjectList.SetRedraw(TRUE);
 }
/*===========================================================================
 *		End of Class Method CMWEditView::FillDialogueList()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void FillList (pItemType, pColData);
 *
 *=========================================================================*/
void CMWEditView::FillList (const TCHAR* pItemType, esmcoldata_t* pColData) {
  esmrecinfo_t* pRecInfo;
  int		ArrayIndex;
  int		Count;
  bool		ViewChanged = GetDocument()->GetViewChanged();

  m_ObjectList.SetRedraw(FALSE);
  m_ObjectList.InitObjectList(pColData);

  if (pColData == NULL) {
    m_ObjectList.SetRedraw(TRUE);
    return;
   }

  m_pCurrentType = pItemType;
  pRecInfo = GetDocument()->FindFirstRecord(pItemType, ArrayIndex);
  Count = 0;

  while (pRecInfo != NULL) {

    if (!ViewChanged || pRecInfo->pFile->IsActive()) {
      m_ObjectList.AddItem(pRecInfo);
      Count++;
     }

    pRecInfo = GetDocument()->FindNextRecord(pItemType, ArrayIndex);
   }

  m_ObjectList.SetRedraw(TRUE);
 }
/*===========================================================================
 *		End of Class Method CMWEditView::FillList()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void InitTypeList (void);
 *
 * Protected class method that initializes the object type list.
 *
 *=========================================================================*/
void CMWEditView::InitTypeList (void) {
  int Index;
  int ListIndex;

  for (Index = 0; l_RecordTabData[Index].Title != NULL; Index++) {
    ListIndex = m_TypeList.AddString(l_RecordTabData[Index].Title);
    if (ListIndex >= 0) m_TypeList.SetItemData(ListIndex, Index);
   }

 }
/*===========================================================================
 *		End of Class Method CMWEditView::InitTypeList()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - bool IsCurrentType (pType);
 *
 *=========================================================================*/
bool CMWEditView::IsCurrentType (const TCHAR* pType) {
  int   ListIndex;
  int	TypeIndex;

  ListIndex = m_TypeList.GetCurSel();
  if (ListIndex < 0 ) return (false);
  TypeIndex = m_TypeList.GetItemData(ListIndex);
  
  return (TSTRICMP(l_RecordTabData[TypeIndex].ItemType, pType) == 0);
 }
/*===========================================================================
 *		End of Class Method CMWEditView::IsCurrentType()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnColumnclickObjectlist (pNMHDR, pResult);
 *
 *=========================================================================*/
void CMWEditView::OnColumnclickObjectlist (NMHDR* pNMHDR, LRESULT* pResult) {
  NM_LISTVIEW*	pNMListView = (NM_LISTVIEW*)pNMHDR;
  *pResult = 0;
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnColumnclickObjectlist()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnContextMenu (pWnd, Point);
 *
 *=========================================================================*/
void CMWEditView::OnContextMenu (CWnd* pWnd, CPoint Point) {
  CMenu  Menu;
  CMenu* pPopup;
  BOOL   Result;
  CCmdUI MenuState;
  int	 Index;

	/* Get the popup menu to display */
  Result = Menu.LoadMenu(IDR_LIST_MENU);
  if (!Result) return;
  pPopup = Menu.GetSubMenu(0);
  if (pPopup == NULL) return;

  	/* Force the update of the menu commands */
  for (Index = 0; Index < (int) pPopup->GetMenuItemCount(); Index++) {
    MenuState.m_nID = pPopup->GetMenuItemID(Index);
    MenuState.m_nIndex = Index;
    MenuState.m_pMenu = pPopup;
    MenuState.m_pOther = NULL;
    MenuState.m_pSubMenu = NULL;
    MenuState.m_nIndexMax = pPopup->GetMenuItemCount();

    if (MenuState.m_nID != 0) {
      OnCmdMsg(MenuState.m_nID, CN_UPDATE_COMMAND_UI, &MenuState, NULL);
     }
   }

  if (pWnd->GetDlgCtrlID() == IDC_OBJECTLIST) {
    pPopup->TrackPopupMenu(TPM_RIGHTBUTTON | TPM_LEFTALIGN, Point.x, Point.y, this);
   }
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnContextMenu()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnDestroy ();
 *
 *=========================================================================*/
void CMWEditView::OnDestroy() {
  m_EsmDlgHandler.ClearDlgArray();	
  CFormView::OnDestroy();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnDestroy()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditAddnew ();
 *
 *=========================================================================*/
void CMWEditView::OnEditAddnew() {
  CEsmRecord* pRecord;

	/* Ignore if current type is invalid */
  if (m_pCurrentType == NULL) return;

	/* Check for special dialogue type */
  if (TSTRNICMP(m_pCurrentType, MWESM_REC_DIAL, 4) == 0) {

    switch (l_RecordTabData[m_CurrentType].TabType) {
      case OBJECT_TAB_DIALOG:
	pRecord = m_EsmDlgHandler.OnAddNewDialog(MWESM_DIALTYPE_TOPIC);
	break;
      case OBJECT_TAB_VOICE:
	pRecord = m_EsmDlgHandler.OnAddNewDialog(MWESM_DIALTYPE_VOICE);
	break;
      case OBJECT_TAB_GREETING:
	pRecord = m_EsmDlgHandler.OnAddNewDialog(MWESM_DIALTYPE_GREETING);
	break;
      case OBJECT_TAB_JOURNAL:
	pRecord = m_EsmDlgHandler.OnAddNewDialog(MWESM_DIALTYPE_JOURNAL);
	break;
      case OBJECT_TAB_PERSUASION:
	pRecord = m_EsmDlgHandler.OnAddNewDialog(MWESM_DIALTYPE_PERSUASION);
	break;
      }
   }
  else {
    pRecord = m_EsmDlgHandler.OnAddNew(m_pCurrentType);
   }

  if (pRecord == NULL) ErrorHandler.Notify(_T("New Record Error!"));
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditAddnew()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditClean ();
 *
 *=========================================================================*/
void CMWEditView::OnEditClean() {
  POSITION	SelPos;
  CFrameWnd*    pFrame;
  esmrecinfo_t* pRecInfo;
  CString	Buffer;
  int		Result;
  int		ListIndex;
  int		SelCount;

	/* Get the selected info */
  SelPos = m_ObjectList.GetFirstSelectedItemPosition();
  SelCount = m_ObjectList.GetSelectedCount();
  if (SelPos == NULL || SelCount == 0) return;

	/* Prompt user */
  Buffer.Format(_T("This will permanently delete the %d selected records from the active file.\nAre you sure you wish to continue?"), SelCount);
  Result = MessageBox(Buffer, _T("Confirm Clean"), MB_YESNO | MB_ICONQUESTION);
  if (Result != IDYES) return;

  while (SelPos != NULL) {
    ListIndex = m_ObjectList.GetNextSelectedItem(SelPos);
    pRecInfo  = m_ObjectList.GetRecInfo(ListIndex);

    pFrame = m_EsmDlgHandler.FindDialog(pRecInfo);
    if (pFrame != NULL) pFrame->DestroyWindow();
    
    Result = GetDocument()->CleanRecord(pRecInfo);
   }

	/* Rebuild the list */
  m_ObjectList.DeleteAllItems();
  UpdateList();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditClean()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEdititem ();
 *
 *=========================================================================*/
void CMWEditView::OnEdititem() {
  m_ObjectList.EditSelectedItem();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEdititem()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditDelete ();
 *
 *=========================================================================*/
void CMWEditView::OnEditDelete() {
  POSITION	SelPos;
  esmrecinfo_t* pRecInfo;
  CString	Buffer;
  int		ListIndex;
  int		SelCount;
  int		Result;

  SelPos = m_ObjectList.GetFirstSelectedItemPosition();
  SelCount = m_ObjectList.GetSelectedCount();
  if (SelPos == NULL || SelCount == 0) return;

  	/* Prompt user */
  Buffer.Format(_T("This will delete/undelete the %d selected records.\nAre you sure you wish to continue?"), SelCount);
  Result = MessageBox(Buffer, _T("Confirm Delete"), MB_YESNO | MB_ICONQUESTION);
  if (Result != IDYES) return;

  while (SelPos != NULL) {
    ListIndex = m_ObjectList.GetNextSelectedItem(SelPos);
    pRecInfo  = m_ObjectList.GetRecInfo(ListIndex);
    GetDocument()->DeleteRecord(pRecInfo);

    m_ObjectList.UpdateItem(pRecInfo);
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditDelete()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnInitialUpdate ();
 *
 *=========================================================================*/
void CMWEditView::OnInitialUpdate() {
  CFormView::OnInitialUpdate();
  
	/* Initialize the object list */
  m_EsmDlgHandler.SetDocument(GetDocument());
  m_EsmDlgHandler.SetMainFrame((CMainFrame *) AfxGetMainWnd());
  m_ObjectList.OnInitCtrl();
  m_ObjectList.SetEnableDrag(true);
  m_ObjectList.SetAcceptDrag(true);
  m_ObjectList.SetWantKeys(true);
  m_ObjectList.SetDlgHandler(&m_EsmDlgHandler);
    
	/* Initialize the object type list control */
  InitTypeList();
  m_TypeList.SelectString(-1, l_RecordTabData[0].Title);
  FillList(l_RecordTabData[0].ItemType, l_RecordTabData[0].pColData);
  m_CurrentType = 0;

	/* Resize the view's frame to fit */
  ResizeParentToFit();

	/* Disable the view scroll bars */
  SetScrollSizes(MM_TEXT, CSize(0, 0) );

  ShowWindow(SW_SHOWNORMAL);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnInitialUpdate()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - LRESULT  OnRecordKey (lParam, wParam);
 *
 *=========================================================================*/
LRESULT CMWEditView::OnRecordKey (WPARAM lParam, LPARAM wParam) {

	/* Toggle delete */   
  if (lParam == VK_DELETE || lParam == VK_BACK) {
    OnEditDelete();
    return (1);
   }

  return (0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnRecordKey()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnSelchangeTypelist ();
 *
 *=========================================================================*/
void CMWEditView::OnSelchangeTypelist() {
  CString Buffer;
  int	  ListIndex;
  int     TypeIndex;

  ListIndex = m_TypeList.GetCurSel();
  if (ListIndex < 0) return;
  TypeIndex = m_TypeList.GetItemData(ListIndex);

	/* Ignore if the type hasn't changed */
  if (TypeIndex == m_CurrentType) return;
  UpdateList();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnSelchangeTypelist()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - int OnSelectItem (pRecInfo);
 *
 *=========================================================================*/
int CMWEditView::OnSelectItem (esmrecinfo_t* pRecInfo) {
  int TabIndex; 
  int ListIndex;

	/* Ensure valid input */
  if (pRecInfo == NULL) return (-1);

	/* Display the given type of record if required */
  if (!IsCurrentType(pRecInfo->pRecord->GetType())) {
    TabIndex = FindTabInfo(pRecInfo->pRecord->GetType());
    if (TabIndex < 0) return (-1);
    FindListItem(m_TypeList, TabIndex, true);
    UpdateList();
   }

	/* Attempt to select the given record */
  ListIndex = m_ObjectList.FindRecord(pRecInfo);

  if (ListIndex >= 0) {
    m_ObjectList.SetItemState(ListIndex, LVIS_SELECTED, LVIS_SELECTED);
    m_ObjectList.EnsureVisible(ListIndex, FALSE);
   }

	/* Change the current focus view */
  GetParentFrame()->ActivateFrame(SW_RESTORE);
  return (0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnSelectItem()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnSize (nType, cx, cy);
 *
 *=========================================================================*/
void CMWEditView::OnSize (UINT nType, int cx, int cy) {
  CRect ListRect;
  int   Width;
  int   Height;

  CFormView::OnSize(nType, cx, cy);

	/* Ignore if we are being minimized */
  if (nType == SIZE_MINIMIZED) return;
  if (!::IsWindow(m_ObjectList.m_hWnd)) return;

	/* Compute the new tab control size */
  Width  = cx - OBJECTTAB_WIDTH_OFFSET - TYPELIST_WIDTH;
  Height = cy - OBJECTTAB_HEIGHT_OFFSET;
  if (Width  < OBJECTTAB_MIN_WIDTH)  Width  = OBJECTTAB_MIN_WIDTH;
  if (Height < OBJECTTAB_MIN_HEIGHT) Height = OBJECTTAB_MIN_HEIGHT;

	/* Compute the new object list size */
  m_ObjectList.SetWindowPos(NULL, 0, 0, Width, Height, SWP_NOZORDER | SWP_NOMOVE);
  m_TypeList.SetWindowPos(NULL, 0, 0, TYPELIST_WIDTH, Height, SWP_NOZORDER | SWP_NOMOVE);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnSize()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnUpdateEditDelete (pCmdUI);
 *
 *=========================================================================*/
void CMWEditView::OnUpdateEditDelete(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateEditClean(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateEditCreatecopy(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateEditRename(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateEditInfo (CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateFileImportCsvrecords(CCmdUI* pCmdUI) {
  pCmdUI->Enable(TRUE);
 }

void CMWEditView::OnUpdateFileExportCsv(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }

void CMWEditView::OnUpdateFileExportSpellmerchants(CCmdUI* pCmdUI) {
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateEditDelete()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnUpdateEditAddnew (pCmdUI);
 *
 *=========================================================================*/
void CMWEditView::OnUpdateEditAddnew(CCmdUI* pCmdUI) {
  pCmdUI->Enable(GetDocument()->CanCreateNew(m_pCurrentType));
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateEditAddnew()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnUpdateEditEdititem (pCmdUI);
 *
 *=========================================================================*/
void CMWEditView::OnUpdateEditEdititem(CCmdUI* pCmdUI) {
  pCmdUI->Enable(m_ObjectList.GetSelectedCount() > 0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateEditEdititem()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnUpdateViewViewactive (pCmdUI);
 *
 *=========================================================================*/
void CMWEditView::OnUpdateViewViewactive(CCmdUI* pCmdUI) {
  pCmdUI->SetCheck(GetDocument()->GetViewChanged());
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateViewViewactive()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnViewViewactive ();
 *
 *=========================================================================*/
void CMWEditView::OnViewViewactive() {
  bool Flag = GetDocument()->GetViewChanged();
  GetDocument()->SetViewChanged(!Flag);

  UpdateList();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnViewViewactive()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - BOOL PreCreateWindow (cs);
 *
 *=========================================================================*/
BOOL CMWEditView::PreCreateWindow (CREATESTRUCT& cs) {
  return CFormView::PreCreateWindow(cs);
 }
/*===========================================================================
 *		End of Class Method CMWEditView::PreCreateWindow()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void UpdateCurrentListData (void);
 *
 * Saves the current list column configuration, if any.
 *
 *=========================================================================*/
void CMWEditView::UpdateCurrentListData (void) {
  m_ObjectList.UpdateColData();
 }
/*===========================================================================
 *		End of Class Method CMWEditView::UpdateCurrentListData()
 *=========================================================================*/
 

/*===========================================================================
 *
 * Begin Class Diagnostics
 *
 *=========================================================================*/
#ifdef _DEBUG
void CMWEditView::AssertValid() const {
  CFormView::AssertValid();
 }

void CMWEditView::Dump(CDumpContext& dc) const  {
  CFormView::Dump(dc);
 }

CMWEditDoc* CMWEditView::GetDocument() {
  ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(CMWEditDoc)));
  return (CMWEditDoc*)m_pDocument;
 }
#endif
/*===========================================================================
 *		End of Class Diagnostics
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnUpdate (pSender, lHint, pHint);
 *
 *=========================================================================*/
void CMWEditView::OnUpdate(CView* pSender, LPARAM lHint, CObject* pHint) {

  switch (lHint) {
    case MWEDITDOC_HINT_UPDATE:
	OnSelchangeTypelist();
	break;
    case MWEDITDOC_HINT_UPDATEITEM:
	OnUpdateItem((esmrecinfo_t*) pHint);
	break;
    case MWEDITDOC_HINT_NEWITEM:
	OnUpdateAddItem((esmrecinfo_t*) pHint);
	break;
    case MWEDITDOC_HINT_SELECTITEM:
        OnSelectItem((esmrecinfo_t*) pHint);
	break;
    default:
	CFormView::OnUpdate(pSender, lHint, pHint);
	break;
   }
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdate()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void PreSubclassWindow ();
 *
 *=========================================================================*/
void CMWEditView::PreSubclassWindow() {
  CFormView::PreSubclassWindow();
 }
/*===========================================================================
 *		End of Class Method CMWEditView::PreSubclassWindow()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - int OnUpdateAddItem (pRecInfo);
 *
 *=========================================================================*/
int CMWEditView::OnUpdateAddItem (esmrecinfo_t* pRecInfo) {

	/* Ignore if the currently displayed tab is not of the item's type */
  if (!IsCurrentType(pRecInfo->pRecord->GetType())) return (0);
  
  m_ObjectList.AddItem(pRecInfo);
  return (0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateAddItem()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - int OnUpdateItem (pRecInfo);
 *
 *=========================================================================*/
int CMWEditView::OnUpdateItem (esmrecinfo_t* pRecInfo) {
  LVFINDINFO FindInfo;
  int	     Index;

	/* Ignore if the currently displayed tab is not of the item's type */
  if (!IsCurrentType(pRecInfo->pRecord->GetType())) return (0);
  FindInfo.flags  = LVFI_PARAM;
  FindInfo.lParam = (DWORD) pRecInfo;
  Index = m_ObjectList.FindItem(&FindInfo);

  if (Index >= 0) {
    m_ObjectList.UpdateItem(Index);
   }
  else {
    OnUpdateAddItem(pRecInfo);
   }

  return (0);  
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnUpdateItem()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnClose ();
 *
 *=========================================================================*/
void CMWEditView::OnClose() {
  CFormView::OnClose();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnClose()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Method - void UpdateList (void);
 *
 *=========================================================================*/
void CMWEditView::UpdateList (void) {
  CString Buffer;
  int	  ListIndex;
  int     TypeIndex;
  int	  SortData;

  ListIndex = m_TypeList.GetCurSel();
  if (ListIndex < 0) return;
  TypeIndex = m_TypeList.GetItemData(ListIndex);

	/* Set the list parameters */
  UpdateCurrentListData();
  m_CurrentType = TypeIndex;

	/* Fill the list, either by custom method or default */
  if (l_RecordTabData[m_CurrentType].FillFunc == NULL)
    FillList(l_RecordTabData[m_CurrentType].ItemType, l_RecordTabData[m_CurrentType].pColData);
  else
    (this->*(l_RecordTabData[m_CurrentType].FillFunc))(l_RecordTabData[m_CurrentType].pColData);

	/* Sort the items by the default sort field */
  if (l_RecordTabData[m_CurrentType].pColData->LastSortField == 0) {
    l_RecordTabData[m_CurrentType].pColData->LastSortField = l_RecordTabData[m_CurrentType].DefaultSort;
    m_ObjectList.SortItems(l_ItemSortCallBack, l_RecordTabData[m_CurrentType].DefaultSort);
   }
  else {
    SortData  = l_RecordTabData[m_CurrentType].pColData->LastSortField;
    SortData += (l_RecordTabData[m_CurrentType].pColData->LastReverseSort << 16);
    m_ObjectList.SortItems(l_ItemSortCallBack, SortData);
   }

	/* Update the parent frame title */
  Buffer.Format(_T("%s -- %s"), GetDocument()->GetTitle(), l_RecordTabData[m_CurrentType].Title);
  ::SetWindowText(GetParentFrame()->m_hWnd, Buffer);

 }
/*===========================================================================
 *		End of Class Method CMWEditView::UpdateList()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditOutputrecinfo ();
 *
 *=========================================================================*/
void CMWEditView::OnEditOutputrecinfo() {
  CEsmRecInfoArray* pArray = GetDocument()->GetRecInfoArray();
  int		    Index;

  for (Index = 0; Index < pArray->GetSize(); Index++) {
    SystemLog.Printf ("ID = '%s' (%s, %4.4s), %s", (*pArray)[Index]->pRecord->GetID(), (*pArray)[Index]->pRecord->GetItemType(),
				(*pArray)[Index]->pRecord->GetType(), (*pArray)[Index]->pRecord->GetFieldString(ESM_FIELD_NAME));
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditOutputrecinfo()
 *=========================================================================*/


int l_FindRecSort (const void* pElem1, const void* pElem2, const long UserData) {
  esmrecinfo_t* pRec1 = (esmrecinfo_t *) pElem1;
  TCHAR* pName = (TCHAR *) pElem2;  

  if (pRec1 == NULL) return (0);	

  return StringCompare(pRec1->pRecord->GetID(), pName, false);
 }


int l_FindRecSort (const void* pElem1, const void* pElem2) {
  esmrecinfo_t* pRec1 = (esmrecinfo_t *) pElem1;
  TCHAR* pName = (TCHAR *) pElem2;  

  if (pRec1 == NULL) return (0);	

  return StringCompare(pRec1->pRecord->GetID(), pName, false);
 }



int l_RecSortPtr (const void* pElem1, const void* pElem2) {
  TCHAR* pString = (TCHAR *) pElem1;
  esmrecinfo_t* pRec2 = *(esmrecinfo_t **) pElem2;

  if (pRec2 == NULL) return (0);	

  return StringCompare(pString, pRec2->pRecord->GetID(), false);
 }


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditTestfind ();
 *
 *=========================================================================*/
void CMWEditView::OnEditTestfind() {
  CEsmRecInfoArray* pArray = GetDocument()->GetRecInfoArray();
  int		    Index;
  int		    Result;
  double	    StartTime;
  double	    EndTime;
  double	    FastTime;
  double	    SlowTime;
  double	    AvgFast = 0;
  double	    AvgSlow = 0;
  int		    Count = 0;
  const TCHAR*	    pID;

  for (Index = 0; Index < pArray->GetSize(); Index++) {
    pID = pArray->GetAt(Index)->pRecord->GetID();
    if (pID == NULL) continue;
    StartTime = GetHiClockTime();

    Result = pArray->FindFastFunc(l_FindRecSort, (void *)pID);
    //Result = pArray->FindBSearch(l_RecSortPtr, (void *)pID);
    EndTime = GetHiClockTime();
    FastTime = EndTime - StartTime;
    AvgFast += FastTime;

    StartTime = GetHiClockTime();
    pArray->FindElement(pArray->GetAt(Index));
    EndTime = GetHiClockTime();
    SlowTime = EndTime - StartTime;
    AvgSlow += SlowTime;
    Count++;

    if (Result >= 0)
      SystemLog.Printf ("%4d/%4d = '%s' (%g / %g secs)",  Index, Result, pID, FastTime, SlowTime);
    else
      SystemLog.Printf ("%4d/MISS = '%s' (%g / %g secs)", Index, pID, FastTime, SlowTime);
   }

  SystemLog.Printf ("Average = %g / %g secs", AvgFast/(double)Count, AvgSlow/(double)Count);

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditTestfind()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditPlugininfo ();
 *
 *=========================================================================*/
void CMWEditView::OnEditPlugininfo() {
  CEsmHeaderDlg Dialog;
  int		Index;

  Dialog.DoModal((CEsmTES3 *) GetDocument()->GetActivePlugin()->FindFirst(MWESM_REC_TES3, Index), GetDocument()->GetTitle());
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditPlugininfo()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditFindtext ();
 *
 *=========================================================================*/
void CMWEditView::OnEditFindtext() {
  m_EsmDlgHandler.OpenFindDlg();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditFindtext()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - LRESULT OnRecordDrop (lParam, wParam);
 *
 *=========================================================================*/
LRESULT CMWEditView::OnRecordDrop (WPARAM lParam, LPARAM wParam) {
  CString	Buffer;
  CMWEditDoc*   pSourceDoc = (CMWEditDoc *) lParam;
  esmrecinfo_t* pRecInfo = (esmrecinfo_t *) wParam;

	/* Ensure we only accept from another document (ie. copy records) */
  if (pSourceDoc == GetDocument()) return (0);

	/* Copy the record */  
  GetDocument()->CopyRecord(pSourceDoc, pRecInfo);

	/* Update the view */
  UpdateList();
  return (0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnRecordDrop()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditCreatecopy ();
 *
 *=========================================================================*/
void CMWEditView::OnEditCreatecopy() {
  CString	Buffer;
  esmrecinfo_t* pRecInfo;
  esmrecinfo_t* pNewRecInfo;
  bool		Result;

	/* Get the current selected item */
  pRecInfo = m_ObjectList.GetCurrentRecord();
  if (pRecInfo == NULL) return;
  Buffer = pRecInfo->pRecord->GetID();

	/* Prompt user for a new ID */
  Result = InputDialog(&Buffer, _T("Input the new ID for the object:"), _T("Enter New ID"));
  if (!Result) return;

	/* Attempt to copy the record */
  pNewRecInfo = GetDocument()->CreateCopy(pRecInfo, Buffer);

	/* Display error message on failure */
  if (pNewRecInfo == NULL) {
    ErrorHandler.Notify(_T("Error creating the object!"));
   }
	/* Add the new record to the list on success */
  else {
    m_ObjectList.AddItem(pNewRecInfo);
   }
  	
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditCreatecopy()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditInfo ();
 *
 *=========================================================================*/
void CMWEditView::OnEditInfo() {
  esmrecinfo_t* pRecInfo;

	/* Find the uses info on the current record */
  pRecInfo = m_ObjectList.GetCurrentRecord();

	/* Display the uses dialog */
  if (pRecInfo != NULL) {
    m_EsmDlgHandler.OpenUsesDlg(pRecInfo);
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditInfo()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditRename ();
 *
 *=========================================================================*/
void CMWEditView::OnEditRename() {
  CString	Buffer;
  esmrecinfo_t* pRecInfo;
  bool		Result;

	/* Get the current selected item */
  pRecInfo = m_ObjectList.GetCurrentRecord();
  if (pRecInfo == NULL) return;
  Buffer = pRecInfo->pRecord->GetID();

  	/* Prompt user for a new ID */
  Result = InputDialog(&Buffer, _T("Input the new ID for the object:"), _T("Enter New ID"));
  if (!Result) return;

	/* Attempt to rename the record */
  Result = GetDocument()->RenameRecord(pRecInfo, Buffer);

	/* Display error message on failure */
  if (!Result) {
    ErrorHandler.Notify(_T("Error renaming the object!"));
   }
	/* Update the new record to the list on success */
  else {
    m_ObjectList.UpdateItem(pRecInfo);
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditRename()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditScripttemplate ();
 *
 *=========================================================================*/
void CMWEditView::OnEditScripttemplate() {
  m_EsmDlgHandler.OpenScrTempDlg();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditScripttemplate()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnImportScript ();
 *
 *=========================================================================*/
void CMWEditView::OnImportScript() {
  CFileDialog FileDlg(TRUE, _T("txt"), NULL, OFN_HIDEREADONLY | OFN_PATHMUSTEXIST | OFN_ALLOWMULTISELECT,
			ESM_IMPORTSCPT_FILTER, this);
  POSITION      FilePos;
  CString       FileBuffer;
  esmrecinfo_t* pRecInfo;
  int	        Result;

	/* Display the open file dialog */
  FileDlg.m_ofn.lpstrTitle = _T("Select Scripts To Import");
  Result = FileDlg.DoModal();
  if (Result != IDOK) return;

	/* Attempt to import all selected script files */
  FilePos = FileDlg.GetStartPosition();

  while (FilePos != NULL) {
    FileBuffer = FileDlg.GetNextPathName(FilePos);
    pRecInfo = GetDocument()->ImportScript(FileBuffer);
    if (pRecInfo == NULL) ErrorHandler.Notify(_T("Import Script Error"));
   }

	/* Update the list display as required */
  UpdateList();
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnImportScript()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnExportRecords ();
 *
 *=========================================================================*/
void CMWEditView::OnExportRecords() {
 
	/* Special case records */
  if (TSTRNICMP(m_pCurrentType, MWESM_REC_SCPT, 4) == 0) {
    ExportScripts();
   }
  else {
    this->OnFileExportCsv();
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnExportRecords()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnTestGettype ();
 *
 *=========================================================================*/
void CMWEditView::OnTestGettype() {
  CInputDialog  InputDlg;
  CString	Buffer;
  esmrecinfo_t* pRecInfo;
  bool		Result;

  Result = InputDlg.DoModal(&Buffer, _T("Enter record ID to get the type of:"), _T("Enter Record ID"));
  if (!Result) return;

  pRecInfo = GetDocument()->FindRecord(Buffer);

  if (pRecInfo == NULL) {
    MessageBox(_T("Unknown record ID!"), _T("Item Type Check"));
   }
  else { 
    Buffer.Format(_T("Item type is: %s (%4.4s)"), pRecInfo->pRecord->GetItemType(), pRecInfo->pRecord->GetType());
    MessageBox(Buffer, _T("Item Type Check"));
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnTestGettype()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnFileImportCsvrecords ();
 *
 *=========================================================================*/
void CMWEditView::OnFileImportCsvrecords() {
  CEsmCsvImportDlg CsvImportDlg(this);
  int		   Result;

	/* Initialize the dialog */
  CsvImportDlg.SetDocument(GetDocument());

	/* Display the dialog modally */
  Result = CsvImportDlg.DoModal();
  if (!Result) return;

  GetDocument()->UpdateAllViews(NULL, MWEDITDOC_HINT_UPDATE, 0);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnFileImportCsvrecords()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnFileExportCsv ();
 *
 *=========================================================================*/
void CMWEditView::OnFileExportCsv() {
  CFileDialog FileDlg(FALSE, ESMCSVIMP_CSV_EXT, NULL, OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
			ESMCSVIMP_CSV_FILTER, this);
  CString	Buffer;
  esmrecinfo_t* pRecInfo;
  CCsvFile	CsvFile;
  POSITION	ListPos;
  const TCHAR*  pString;
  int		Result;
  int		Index;
  int		NumOutput;
  int*		pColArray;
  int		ColIndex;

  	/* Get the output definition array for the current record type */
  pColArray = GetEsmCsvColArray(m_pCurrentType);   	

  if (pColArray == NULL) {
    ErrorHandler.AddError(ERR_BADINPUT, _T("Cannot export records of type %4.4s!"), m_pCurrentType);
    ErrorHandler.Notify(_T("Csv Export Failure!"));
    return;
   }

   	/* Display the file dialog modally */
  FileDlg.m_ofn.lpstrTitle = _T("Select CSV Output File");
  Result = FileDlg.DoModal();
  if (Result != IDOK) return;

	/* Output the CSV header column */
  for (ColIndex = 0; pColArray[ColIndex] >= 0; ColIndex++) {
    pString = GetEsmFieldName(pColArray[ColIndex]);
    CsvFile.SetString(0, ColIndex, pString == NULL ? _T("") : pString);
   }

	/* Export all the currently selected objects */
  ListPos = m_ObjectList.GetFirstSelectedItemPosition();
  NumOutput = 0;

  while (ListPos != NULL) {
    Index = m_ObjectList.GetNextSelectedItem(ListPos);
    pRecInfo = m_ObjectList.GetRecInfo(Index);
    if (pRecInfo == NULL) continue;

    		/* Output the CSV row column */
    for (ColIndex = 0; pColArray[ColIndex] >= 0; ColIndex++) {
      if (pColArray[ColIndex] == ESM_FIELD_ITEMTYPE) 
        pString = GetEsmCsvRecordString(pRecInfo->pRecord->GetType());
      else
        pString = pRecInfo->pRecord->GetFieldString(pColArray[ColIndex]);

      CsvFile.SetString(NumOutput+1, ColIndex, pString == NULL ? _T("") : pString);
     }

    NumOutput++;
   }

   	/* Attempt to save the csv file */
  Result = CsvFile.Save(FileDlg.GetPathName());

  if (!Result) {
    ErrorHandler.Notify(_T("Csv File Error!"));
    return;
   }

	/* Success message box */
  Buffer.Format(_T("Successfully output %d records!"), NumOutput);		
  MessageBox(Buffer, _T("Csv Export Success!"), MB_OK | MB_ICONINFORMATION);
 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnFileExportCsv()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnFileExportSpellmerchants ();
 *
 *=========================================================================*/
void CMWEditView::OnFileExportSpellmerchants() {
  CFileDialog	FileDlg(FALSE, ESMCSVIMP_CSV_EXT, NULL, OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT,
			ESMCSVIMP_CSV_FILTER, this);
  CString	Buffer;
  int		Result;

  	/* Display the file dialog modally */
  FileDlg.m_ofn.lpstrTitle = _T("Select CSV Output File");
  Result = FileDlg.DoModal();
  if (Result != IDOK) return;

	/* Attempt to export the merchant data */
  Result = GetDocument()->ExportSpellMerchants(FileDlg.GetPathName());

  if (!Result) {
    ErrorHandler.Notify(_T("Export Failed!"));
   }
  else {
    Buffer.Format(_T("Successfully output %d effects to the output file!"), GetDocument()->GetNumEffectsOutput());
    MessageBox(Buffer, _T("Export Success!"), MB_OK | MB_ICONINFORMATION);
   }

 }
/*===========================================================================
 *		End of Class Event CMWEditView::OnFileExportSpellmerchants()
 *=========================================================================*/


/*===========================================================================
 *
 * Function - void l_CompareScriptHook (pString, Args);
 *
 *=========================================================================*/
CEsmScriptCompareDlg*	l_CompareScriptView = NULL;

void l_CompareScriptHook (const TCHAR* pString, va_list Args) {

  if (l_CompareScriptView != NULL) {
    l_CompareScriptView->AddLogText(pString, Args);
  }
}
/*===========================================================================
 *		End of Function l_CompareScriptHook()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnTestComparescripts ();
 *
 *=========================================================================*/
void CMWEditView::OnTestComparescripts() {
  CFileDialog FileDlg(TRUE, NULL, NULL, OFN_HIDEREADONLY  | OFN_FILEMUSTEXIST, _T("Plugin Files (*.esp)|*.esp|Master Files (*.esm)|*.esm|All Files (*.*)|*.*||"), this);
  int         Result;

  FileDlg.m_ofn.lpstrTitle = _T("Select Plugin To Compare Scripts");
  Result = FileDlg.DoModal();
  if (Result != IDOK) return;

  Result = GetDocument()->LoadScriptFile(FileDlg.GetPathName());

  if (!Result) {
    ErrorHandler.Notify("Error loading plugin for script comparison!");
    return;
  }

  l_CompareScriptView = m_EsmDlgHandler.OpenScriptCompareDlg();
  if (l_CompareScriptView != NULL) l_CompareScriptView->ClearText();
  SystemLog.SetHookProc(l_CompareScriptHook);

  GetDocument()->CompareScripts();

  SystemLog.SetHookProc(NULL);
  l_CompareScriptView = NULL;

}
/*===========================================================================
 *		End of Class Event CMWEditView::OnTestComparescripts()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditCompileactivescripts ();
 *
 *=========================================================================*/
void CMWEditView::OnEditCompileactivescripts() {
  GetDocument()->CompileAllActiveScripts();	
}
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditCompileactivescripts()
 *=========================================================================*/


/*===========================================================================
 *
 * Class CMWEditView Event - void OnEditMakeactive ();
 *
 *=========================================================================*/
void CMWEditView::OnEditMakeactive() {
  POSITION	SelPos;
  CFrameWnd*    pFrame;
  esmrecinfo_t* pRecInfo;
  CString	Buffer;
  int		ListIndex;
  int		SelCount;

	/* Get the selected records */
  SelPos   = m_ObjectList.GetFirstSelectedItemPosition();
  SelCount = m_ObjectList.GetSelectedCount();
  if (SelPos == NULL || SelCount == 0) return;

  while (SelPos != NULL) {
    ListIndex = m_ObjectList.GetNextSelectedItem(SelPos);
    pRecInfo  = m_ObjectList.GetRecInfo(ListIndex);

    pFrame = m_EsmDlgHandler.FindDialog(pRecInfo);
    if (pFrame != NULL) pFrame->DestroyWindow();
    
    GetDocument()->MakeActive(pRecInfo);
    m_ObjectList.UpdateItem(ListIndex);
  }

}
/*===========================================================================
 *		End of Class Event CMWEditView::OnEditMakeactive()
 *=========================================================================*/

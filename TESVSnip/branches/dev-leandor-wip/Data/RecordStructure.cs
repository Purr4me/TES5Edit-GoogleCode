 // This source code was auto-generated by xsd, Version=4.0.30319.1.

namespace TESVSnip.Data
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using System.Xml.Schema;
    using System.Xml.Serialization;

    /// <summary>
    /// The group.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Group
    {
        ///// <remarks/>
        // [System.Xml.Serialization.XmlElementAttribute("Subrecord")]
        // public List<Subrecord> Subrecords = new List<Subrecord>();
        ///// <remarks/>
        // [System.Xml.Serialization.XmlElementAttribute("Group")]
        // public List<Group> Groups = new List<Group>();
        [XmlElement("Group", typeof(Group))]
        [XmlElement("Subrecord", typeof(Subrecord))]
        public ArrayList Items = new ArrayList();

        /// <summary>
        /// The desc.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string desc = string.Empty;

        /// <summary>
        /// The id.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string id = string.Empty;

        /// <summary>
        /// The name.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string name = string.Empty;

        /// <summary>
        /// The optional.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int optional;

        /// <summary>
        /// The repeat.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int repeat;

        [XmlIgnore]
        public IEnumerable<Group> Groups
        {
            get
            {
                return this.Items.OfType<Group>();
            }
        }

        [XmlIgnore]
        public IEnumerable<Subrecord> Subrecords
        {
            get
            {
                return this.Items.OfType<Subrecord>();
            }
        }
    }

    /// <summary>
    /// The subrecord.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Subrecord
    {
        /// <summary>
        /// The elements.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlElement("Element", Form = XmlSchemaForm.Unqualified)]
        public List<SubrecordElement> Elements = new List<SubrecordElement>();

        /// <summary>
        /// The condid.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int condid;

        /// <summary>
        /// The condition.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string condition;

        /// <summary>
        /// The condvalue.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string condvalue;

        /// <summary>
        /// The desc.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string desc;

        /// <summary>
        /// The name.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        public string name;

        /// <summary>
        /// The notininfo.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(false)]
        public bool notininfo;

        /// <summary>
        /// The optional.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int optional;

        /// <summary>
        /// The repeat.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int repeat;

        [XmlAttribute]
        [DefaultValue(0)]
        public int size;

        [XmlIgnore]
        [DefaultValue(false)]
        public bool usehexeditor;

        public Subrecord()
        {
            this.desc = string.Empty;
            this.optional = 0;
            this.repeat = 0;
            this.notininfo = false;
            this.condid = 0;
            this.condition = string.Empty;
            this.condvalue = string.Empty;
            this.size = 0;
        }
    }

    /// <summary>
    /// The subrecord element.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class SubrecordElement
    {
        /// <summary>
        /// The condid.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int condid;

        /// <summary>
        /// The desc.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string desc = string.Empty;

        /// <summary>
        /// The flags.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string flags;

        [XmlIgnore]
        [DefaultValue(0)]
        public int group;

        /// <summary>
        /// The hexview.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(false)]
        public bool hexview;

        /// <summary>
        /// The multiline.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(false)]
        public bool multiline;

        /// <summary>
        /// The name.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        public string name;

        /// <summary>
        /// The notininfo.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(false)]
        public bool notininfo;

        /// <summary>
        /// The optional.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int optional;

        /// <summary>
        /// The options.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        public string options;

        /// <summary>
        /// The refid.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string refid;

        /// <summary>
        /// The reftype.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string reftype;

        /// <summary>
        /// The repeat.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue(0)]
        public int repeat;

        [XmlIgnore]
        [DefaultValue(0)]
        public int size;

        /// <summary>
        /// The type.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        public string type;

        public SubrecordElement()
        {
            this.hexview = false;
            this.reftype = string.Empty;
            this.multiline = false;
            this.condid = 0;
            this.notininfo = false;
            this.repeat = 0;
            this.flags = string.Empty;
            this.optional = 0;
            this.refid = string.Empty;
            this.size = 0;
        }
    }

    /// <summary>
    /// The records.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Records
    {
        /// <summary>
        /// The items.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlElement("Group", typeof(Group))]
        [XmlElement("Record", typeof(RecordsRecord), Form = XmlSchemaForm.Unqualified)]
        [XmlElement("Subrecord", typeof(Subrecord))]
        public ArrayList Items = new ArrayList();
    }

    /// <summary>
    /// The records record.
    /// </summary>
    /// <remarks>
    /// </remarks>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class RecordsRecord
    {
        ///// <remarks/>
        // [System.Xml.Serialization.XmlElementAttribute("Subrecord")]
        // public List<Subrecord> Subrecords = new List<Subrecord>();
        ///// <remarks/>
        // [System.Xml.Serialization.XmlElementAttribute("Group")]
        // public List<Group> Groups = new List<Group>();
        [XmlElement("Group", typeof(Group))]
        [XmlElement("Subrecord", typeof(Subrecord))]
        public ArrayList Items = new ArrayList();

        /// <summary>
        /// The desc.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        [DefaultValue("")]
        public string desc;

        /// <summary>
        /// The name.
        /// </summary>
        /// <remarks>
        /// </remarks>
        [XmlAttribute]
        public string name;

        public RecordsRecord()
        {
            this.desc = string.Empty;
        }

        [XmlIgnore]
        public IEnumerable<Subrecord> AllSubrecords
        {
            get
            {
                return GetSubrecords(this.Items);
            }
        }

        [XmlIgnore]
        public IEnumerable<Group> Groups
        {
            get
            {
                return this.Items.OfType<Group>();
            }
        }

        [XmlIgnore]
        public IEnumerable<Subrecord> Subrecords
        {
            get
            {
                return this.Items.OfType<Subrecord>();
            }
        }

        private static IEnumerable<Subrecord> GetSubrecords(ICollection itr)
        {
            foreach (var item in itr)
            {
                if (item is Subrecord)
                {
                    yield return (Subrecord)item;
                }
                else if (item is Group)
                {
                    foreach (var itm in GetSubrecords(((Group)item).Items))
                    {
                        yield return itm;
                    }
                }
            }
        }
    }
}

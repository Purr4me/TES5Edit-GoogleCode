= Decoding Skyrim Records =

The wbDefinitionsTES5.pas is but one of about 80 files used to make TES5Edit and it's predecessors FO3Edit, FNVEdit, and TES4Edit.  The complexity of the object oriented programing involved makes it so that once we are done with wbDefinitionsTES5.pas the pascal file is used to make TES5Edit.  Granted some other things will need to be updated in the supporting files but I am doing work on additional files to save Elminster some time, and help get us a working copy of TES5Edit.  Updates to TES5Edit will apply to previous versions automatically.

For this example we are going to start with WTHR.  If you run TES5Dump you are going to notice that there are record names with undefined data after them.  Like this for example:

<code>
  MNAM
  RNAM
  QNAM
  JNAM
  FNAM
  IMSP
  DALC</code>

Sometimes you will see two or more entries of the same thing like:
  
<code>
  MNAM
  MNAM
  MNAM</code>

In which you use one of the array functions to deal with them.  Other records could contain 2 or more of "MNAM" and the array function will capture all that exist.

Start by searching for the WTHR record by using "wbRecords(WTHR" and that will take you to the beginning of the record.  In it's current state like many of the records its simply a copy of FNV information for now.

You also need to open the USEPWiki to refer to if some of the records follow a pattern, such as this in this example of the NPC_ record.  These are listed in this exact order several times.
<code>    
  wbRArray('Unknown - TINI, TINC, TINV, TIAS', wbRStruct('Unknown', [
      wbUnknown(TINI),
      wbUnknown(TINC),
      wbUnknown(TINV),
      wbUnknown(TIAS)
    ], []))
  ], True, nil, cpNormal, False, wbNPCAfterLoad);
</code>

Here is how WTHR was when I started writing this example.
<code>
// From the top of the file
  _0_IAD : TwbSignature = #0'IAD';
  _1_IAD : TwbSignature = #1'IAD';
  _2_IAD : TwbSignature = #2'IAD';
  _3_IAD : TwbSignature = #3'IAD';
  _4_IAD : TwbSignature = #4'IAD';
  _5_IAD : TwbSignature = #5'IAD';

// and then the routine itself.

  wbRecord(WTHR, 'Weather', [
    wbEDIDReq,
    wbFormIDCk(_0_IAD, 'Sunrise Image Space Modifier', [IMAD]),
    wbFormIDCk(_1_IAD, 'Day Image Space Modifier', [IMAD]),
    wbFormIDCk(_2_IAD, 'Sunset Image Space Modifier', [IMAD]),
    wbFormIDCk(_3_IAD, 'Night Image Space Modifier', [IMAD]),
    wbFormIDCk(_4_IAD, 'Unknown', [IMAD]),
    wbFormIDCk(_5_IAD, 'Unknown', [IMAD]),
    wbString(DNAM, 'Cloud Textures - Layer 0', 0, cpNormal, True),
    wbString(CNAM, 'Cloud Textures - Layer 1', 0, cpNormal, True),
    wbString(ANAM, 'Cloud Textures - Layer 2', 0, cpNormal, True),
    wbString(BNAM, 'Cloud Textures - Layer 3', 0, cpNormal, True),
    wbMODL,
    wbByteArray(LNAM, 'Unknown', 4, cpNormal, True),
    wbArray(ONAM, 'Cloud Speed', wbInteger('Layer', itU8{, wbDiv(2550)}), 4, nil, nil, cpNormal, True),
    wbByteArray(PNAM, 'Unused', 0, cpIgnore),
    wbArray(NAM0, 'Colors by Types/Times',
      wbArray('Type',
        wbStruct('Time', [
          wbInteger('Red', itU8),
          wbInteger('Green', itU8),
          wbInteger('Blue', itU8),
          wbByteArray('Unused', 1)
        ]),
        ['Sunrise', 'Day', 'Sunset', 'Night', 'High Noon', 'Midnight']
      ),
      ['Sky-Upper','Fog','Clouds-Lower','Ambient','Sunlight','Sun','Stars','Sky-Lower','Horizon','Clouds-Upper']
    , cpNormal, True),
    wbStruct(FNAM, 'Fog Distance', [
      wbFloat('Day - Near'),
      wbFloat('Day - Far'),
      wbFloat('Night - Near'),
      wbFloat('Night - Far'),
      wbFloat('Day - Power'),
      wbFloat('Night - Fower')
    ], cpNormal, True),
    wbByteArray(INAM, 'Unused', 304, cpIgnore, True),
    wbStruct(DATA, '', [
      wbInteger('Wind Speed', itU8),
      wbInteger('Cloud Speed (Lower)', itU8),
      wbInteger('Cloud Speed (Upper)', itU8),
      wbInteger('Trans Delta', itU8),
      wbInteger('Sun Glare', itU8),
      wbInteger('Sun Damage', itU8),
      wbInteger('Precipitation - Begin Fade In', itU8),
      wbInteger('Precipitation - End Fade Out', itU8),
      wbInteger('Thunder/Lightning - Begin Fade In', itU8),
      wbInteger('Thunder/Lightning - End Fade Out', itU8),
      wbInteger('Thunder/Lightning - Frequency', itU8),
      wbInteger('Weather Classification', itU8, wbWthrDataClassification),
      wbStruct('Lightning Color', [
        wbInteger('Red', itU8),
        wbInteger('Green', itU8),
        wbInteger('Blue', itU8)
      ])
    ], cpNormal, True),
    wbRArray('Sounds', wbStruct(SNAM, 'Sound', [
      wbFormIDCk('Sound', [SOUN]),
      wbInteger('Type', itU32, wbEnum([
       {0}'Default',
       {1}'Precip',
       {2}'Wind',
       {3}'Thunder'
      ]))
    ]))
  ]);
</code>

I can't post the WTHR Record TES5Dump made because it's insane how much information is in even one of them.  Which is why I'm not working on it yet because there are smaller records that could be defined easier and then used in Wrye Bash.

<code>
    00TX
    10TX
    20TX
    30TX
    <0TX
    =0TX
    >0TX
    ?0TX
    C0TX
    D0TX
    L0TX
</code> I don't know how those are handled yet I'm gonna skip those.

but after LNAM we have MNAM, NNAM, RNAM, and QNAM.  Those MUST come after LNAM.  Any one of those could be a FromID but I'm going to use wbUnknown as just an example for now.  I'll use another command for unknown FormIds below.  
<code>
*snip*
    wbByteArray(LNAM, 'Unknown', 4, cpNormal, True),
    wbUnknown(MNAM),
    wbUnknown(NNAM),
    wbUnknown(RNAM),
    wbUnknown(QNAM),
    wbArray(ONAM, 'Cloud Speed', wbInteger('Layer', itU8{, wbDiv(2550)}), 4, nil, nil, cpNormal, True),
*snip*
</code>

After PNAM there is a JNAM
Before SNAM is NAM1
There are a bunch of TNAM after SNAM which the wiki says are FormIDs.  If you didn't know that use wbUnknown(TNAM) however, I'm going to use "    wbFormID(TNAM, 'Unknown')," inside a Record Array function
<code>
    wbRArray('Unknown - TNAM', wbRStruct('Unknown', [
      wbFormID(TNAM, 'Unknown')
    ], []))
</code>
	
After all the TNAM entries are some more things that need to be defined:
<code>
  IMSP
  DALC
  DALC
  DALC
  DALC
  MODL
  MODT
</code> 

So something like this.	
<code>
    wbRArray('Unknown - TNAM', wbRStruct('Unknown', [
      wbFormID(TNAM, 'Unknown')
    ], [])),
    wbUnknown(IMSP),
    wbRArray('Unknown - DALC', wbRStruct('Unknown', [
      wbFormID(DALC, 'Unknown')
    ], [])),
    wbUnknown(MODL),
    wbUnknown(MODT)
  ]);
</code>

<code>
  IMSP
  DALC
	
  IMSP : TwbSignature = 'IMSP'; { New to Skyrim }
  DALC : TwbSignature = 'DALC'; { New to Skyrim }
</code>}
Those are new so they need to be entered as a constant at the top of the file.  Also add them in alphabetical order and with a comment that they are new. :D  

After all that and you re compile it, then xDump will give you different results.  Once you rinse and repeat, the record is defined and a decoder makes a ticket for the wiki team (Or just does it themselves) and then the USEPWiki has valid information for the community to refer to.

<code>
wbString(BNAM, 'Cloud Textures - Layer 3', 0, cpNormal, True),
wbMODL,
</code>

Now, with all that said though these are FNV structures and wbMODL could be in the wrong place.  To start decoding WTHR properly it's best to comment out ALL of the code.  Look at the order of things and then uncomment everything to fit that order.  Changing the order when needed.
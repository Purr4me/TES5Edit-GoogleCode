using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Xml.Schema;
using System.Xml.Serialization;

// 
// This source code was auto-generated by xsd, Version=4.0.30319.1.
// 

namespace TESVSnip.Data
{
    /// <remarks/>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Group
    {
        ///// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("Subrecord")]
        //public List<Subrecord> Subrecords = new List<Subrecord>();
        ///// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("Group")]
        //public List<Group> Groups = new List<Group>();

        [XmlElement("Group", typeof (Group))] [XmlElement("Subrecord", typeof (Subrecord))] public ArrayList Items =
            new ArrayList();


        [XmlIgnore]
        public IEnumerable<Subrecord> Subrecords
        {
            get { return Items.OfType<Subrecord>(); }
        }

        [XmlIgnore]
        public IEnumerable<Group> Groups
        {
            get { return Items.OfType<Group>(); }
        }

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string id = "";

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string name = "";

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string desc = "";

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int optional;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int repeat;
    }

    /// <remarks/>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Subrecord
    {
        /// <remarks/>
        [XmlElement("Element", Form = XmlSchemaForm.Unqualified)] public List<SubrecordElement> Elements =
            new List<SubrecordElement>();

        /// <remarks/>
        [XmlAttribute] public string name;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string desc;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int optional;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int repeat;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(false)] public bool notininfo;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int condid;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string condition;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string condvalue;

        [XmlAttribute] [DefaultValue(0)] public int size;

        [XmlIgnore] [DefaultValue(false)] public bool usehexeditor;

        public Subrecord()
        {
            desc = "";
            optional = 0;
            repeat = 0;
            notininfo = false;
            condid = 0;
            condition = "";
            condvalue = "";
            size = 0;
        }
    }

    /// <remarks/>
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class SubrecordElement
    {
        /// <remarks/>
        [XmlAttribute] public string name;

        /// <remarks/>
        [XmlAttribute] public string type;

        /// <remarks/>
        [XmlAttribute] public string options;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(false)] public bool hexview;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string reftype;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(false)] public bool multiline;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int condid;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(false)] public bool notininfo;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int repeat;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string flags;

        /// <remarks/>
        [XmlAttribute] [DefaultValue(0)] public int optional;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string refid;

        [XmlIgnore] [DefaultValue(0)] public int size;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string desc = "";

        [XmlIgnore] [DefaultValue(0)] public int group;


        public SubrecordElement()
        {
            hexview = false;
            reftype = "";
            multiline = false;
            condid = 0;
            notininfo = false;
            repeat = 0;
            flags = "";
            optional = 0;
            refid = "";
            size = 0;
        }
    }

    /// <remarks/>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    [XmlRoot(Namespace = "", IsNullable = false)]
    public class Records
    {
        /// <remarks/>
        [XmlElement("Group", typeof (Group))] [XmlElement("Record", typeof (RecordsRecord), Form = XmlSchemaForm.Unqualified)] [XmlElement("Subrecord", typeof (Subrecord))] public ArrayList Items = new ArrayList();
    }

    /// <remarks/>
    [GeneratedCode("xsd", "4.0.30319.1")]
    [Serializable]
    [DebuggerStepThrough]
    [DesignerCategory("code")]
    [XmlType(AnonymousType = true)]
    public class RecordsRecord
    {
        ///// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("Subrecord")]
        //public List<Subrecord> Subrecords = new List<Subrecord>();
        ///// <remarks/>
        //[System.Xml.Serialization.XmlElementAttribute("Group")]
        //public List<Group> Groups = new List<Group>();

        [XmlIgnore]
        public IEnumerable<Subrecord> AllSubrecords
        {
            get { return GetSubrecords(Items); }
        }


        [XmlIgnore]
        public IEnumerable<Subrecord> Subrecords
        {
            get { return Items.OfType<Subrecord>(); }
        }

        [XmlIgnore]
        public IEnumerable<Group> Groups
        {
            get { return Items.OfType<Group>(); }
        }

        [XmlElement("Group", typeof (Group))] [XmlElement("Subrecord", typeof (Subrecord))] public ArrayList Items =
            new ArrayList();

        /// <remarks/>
        [XmlAttribute] public string name;

        /// <remarks/>
        [XmlAttribute] [DefaultValue("")] public string desc;

        public RecordsRecord()
        {
            desc = "";
        }

        private static IEnumerable<Subrecord> GetSubrecords(ICollection itr)
        {
            foreach (var item in itr)
            {
                if (item is Subrecord)
                {
                    yield return (Subrecord) item;
                }
                else if (item is Group)
                {
                    foreach (var itm in GetSubrecords(((Group) item).Items))
                        yield return itm;
                }
            }
        }
    }
}